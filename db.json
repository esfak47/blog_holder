{"Asset":[{"_id":"themes/hexo-theme-zan/source/style.css","path":"style.css","modified":false},{"_id":"themes/hexo-theme-zan/source/font/FontAwesome.otf","path":"font/FontAwesome.otf","modified":false},{"_id":"themes/hexo-theme-zan/source/font/fontawesome-webfont.eot","path":"font/fontawesome-webfont.eot","modified":false},{"_id":"themes/hexo-theme-zan/source/font/fontawesome-webfont.svg","path":"font/fontawesome-webfont.svg","modified":false},{"_id":"themes/hexo-theme-zan/source/font/fontawesome-webfont.ttf","path":"font/fontawesome-webfont.ttf","modified":false},{"_id":"themes/hexo-theme-zan/source/font/fontawesome-webfont.woff","path":"font/fontawesome-webfont.woff","modified":false},{"_id":"themes/hexo-theme-zan/source/images/arrow.png","path":"images/arrow.png","modified":false},{"_id":"themes/hexo-theme-zan/source/images/arrow_hover.png","path":"images/arrow_hover.png","modified":false},{"_id":"themes/hexo-theme-zan/source/images/bg.jpg","path":"images/bg.jpg","modified":false},{"_id":"themes/hexo-theme-zan/source/images/logo.png","path":"images/logo.png","modified":false},{"_id":"themes/hexo-theme-zan/source/images/top.png","path":"images/top.png","modified":false},{"_id":"themes/hexo-theme-zan/source/images/zanblog_ad.png","path":"images/zanblog_ad.png","modified":false},{"_id":"themes/hexo-theme-zan/source/css/bootstrap.css","path":"css/bootstrap.css","modified":true},{"_id":"themes/hexo-theme-zan/source/css/custom.css","path":"css/custom.css","modified":true},{"_id":"themes/hexo-theme-zan/source/css/docs.css","path":"css/docs.css","modified":false},{"_id":"themes/hexo-theme-zan/source/css/flat/aero.css","path":"css/flat/aero.css","modified":false},{"_id":"themes/hexo-theme-zan/source/css/flat/aero.png","path":"css/flat/aero.png","modified":false},{"_id":"themes/hexo-theme-zan/source/css/flat/aero@2x.png","path":"css/flat/aero@2x.png","modified":false},{"_id":"themes/hexo-theme-zan/source/css/flat/blue.css","path":"css/flat/blue.css","modified":false},{"_id":"themes/hexo-theme-zan/source/css/flat/blue.png","path":"css/flat/blue.png","modified":false},{"_id":"themes/hexo-theme-zan/source/css/flat/blue@2x.png","path":"css/flat/blue@2x.png","modified":false},{"_id":"themes/hexo-theme-zan/source/css/flat/flat.css","path":"css/flat/flat.css","modified":false},{"_id":"themes/hexo-theme-zan/source/css/flat/flat.png","path":"css/flat/flat.png","modified":false},{"_id":"themes/hexo-theme-zan/source/css/flat/flat@2x.png","path":"css/flat/flat@2x.png","modified":false},{"_id":"themes/hexo-theme-zan/source/css/flat/green.css","path":"css/flat/green.css","modified":false},{"_id":"themes/hexo-theme-zan/source/css/flat/green.png","path":"css/flat/green.png","modified":false},{"_id":"themes/hexo-theme-zan/source/css/flat/green@2x.png","path":"css/flat/green@2x.png","modified":false},{"_id":"themes/hexo-theme-zan/source/css/flat/grey.css","path":"css/flat/grey.css","modified":false},{"_id":"themes/hexo-theme-zan/source/css/flat/grey@2x.png","path":"css/flat/grey@2x.png","modified":false},{"_id":"themes/hexo-theme-zan/source/css/flat/grey.png","path":"css/flat/grey.png","modified":false},{"_id":"themes/hexo-theme-zan/source/css/flat/orange.css","path":"css/flat/orange.css","modified":false},{"_id":"themes/hexo-theme-zan/source/css/flat/orange.png","path":"css/flat/orange.png","modified":false},{"_id":"themes/hexo-theme-zan/source/css/flat/orange@2x.png","path":"css/flat/orange@2x.png","modified":false},{"_id":"themes/hexo-theme-zan/source/css/flat/pink.css","path":"css/flat/pink.css","modified":false},{"_id":"themes/hexo-theme-zan/source/css/flat/pink.png","path":"css/flat/pink.png","modified":false},{"_id":"themes/hexo-theme-zan/source/css/flat/pink@2x.png","path":"css/flat/pink@2x.png","modified":false},{"_id":"themes/hexo-theme-zan/source/css/flat/purple.css","path":"css/flat/purple.css","modified":false},{"_id":"themes/hexo-theme-zan/source/css/flat/purple.png","path":"css/flat/purple.png","modified":false},{"_id":"themes/hexo-theme-zan/source/css/flat/purple@2x.png","path":"css/flat/purple@2x.png","modified":false},{"_id":"themes/hexo-theme-zan/source/css/flat/red.css","path":"css/flat/red.css","modified":false},{"_id":"themes/hexo-theme-zan/source/css/flat/red.png","path":"css/flat/red.png","modified":false},{"_id":"themes/hexo-theme-zan/source/css/flat/red@2x.png","path":"css/flat/red@2x.png","modified":false},{"_id":"themes/hexo-theme-zan/source/css/flat/yellow.css","path":"css/flat/yellow.css","modified":false},{"_id":"themes/hexo-theme-zan/source/css/flat/yellow.png","path":"css/flat/yellow.png","modified":false},{"_id":"themes/hexo-theme-zan/source/css/flat/yellow@2x.png","path":"css/flat/yellow@2x.png","modified":false},{"_id":"themes/hexo-theme-zan/source/font-awesome/css/font-awesome.min.css","path":"font-awesome/css/font-awesome.min.css","modified":false},{"_id":"themes/hexo-theme-zan/source/font-awesome/css/font-awesome.css","path":"font-awesome/css/font-awesome.css","modified":false},{"_id":"themes/hexo-theme-zan/source/font-awesome/fonts/FontAwesome.otf","path":"font-awesome/fonts/FontAwesome.otf","modified":false},{"_id":"themes/hexo-theme-zan/source/font-awesome/fonts/fontawesome-webfont.eot","path":"font-awesome/fonts/fontawesome-webfont.eot","modified":false},{"_id":"themes/hexo-theme-zan/source/font-awesome/fonts/fontawesome-webfont.svg","path":"font-awesome/fonts/fontawesome-webfont.svg","modified":false},{"_id":"themes/hexo-theme-zan/source/font-awesome/fonts/fontawesome-webfont.ttf","path":"font-awesome/fonts/fontawesome-webfont.ttf","modified":false},{"_id":"themes/hexo-theme-zan/source/font-awesome/fonts/fontawesome-webfont.woff","path":"font-awesome/fonts/fontawesome-webfont.woff","modified":false},{"_id":"themes/hexo-theme-zan/source/font-awesome/less/bordered-pulled.less","path":"font-awesome/less/bordered-pulled.less","modified":false},{"_id":"themes/hexo-theme-zan/source/font-awesome/less/core.less","path":"font-awesome/less/core.less","modified":false},{"_id":"themes/hexo-theme-zan/source/font-awesome/less/fixed-width.less","path":"font-awesome/less/fixed-width.less","modified":false},{"_id":"themes/hexo-theme-zan/source/font-awesome/less/font-awesome.less","path":"font-awesome/less/font-awesome.less","modified":false},{"_id":"themes/hexo-theme-zan/source/font-awesome/less/icons.less","path":"font-awesome/less/icons.less","modified":false},{"_id":"themes/hexo-theme-zan/source/font-awesome/less/larger.less","path":"font-awesome/less/larger.less","modified":false},{"_id":"themes/hexo-theme-zan/source/font-awesome/less/list.less","path":"font-awesome/less/list.less","modified":false},{"_id":"themes/hexo-theme-zan/source/font-awesome/less/mixins.less","path":"font-awesome/less/mixins.less","modified":false},{"_id":"themes/hexo-theme-zan/source/font-awesome/less/path.less","path":"font-awesome/less/path.less","modified":false},{"_id":"themes/hexo-theme-zan/source/font-awesome/less/rotated-flipped.less","path":"font-awesome/less/rotated-flipped.less","modified":false},{"_id":"themes/hexo-theme-zan/source/font-awesome/less/spinning.less","path":"font-awesome/less/spinning.less","modified":false},{"_id":"themes/hexo-theme-zan/source/font-awesome/less/stacked.less","path":"font-awesome/less/stacked.less","modified":false},{"_id":"themes/hexo-theme-zan/source/font-awesome/less/variables.less","path":"font-awesome/less/variables.less","modified":false},{"_id":"themes/hexo-theme-zan/source/font-awesome/scss/font-awesome.scss","path":"font-awesome/scss/font-awesome.scss","modified":false},{"_id":"themes/hexo-theme-zan/source/js/bootstrap.js","path":"js/bootstrap.js","modified":false},{"_id":"themes/hexo-theme-zan/source/js/bootstrap.min.js","path":"js/bootstrap.min.js","modified":false},{"_id":"themes/hexo-theme-zan/source/js/custom.js","path":"js/custom.js","modified":false},{"_id":"themes/hexo-theme-zan/source/js/html5shiv.js","path":"js/html5shiv.js","modified":false},{"_id":"themes/hexo-theme-zan/source/js/jquery.icheck.js","path":"js/jquery.icheck.js","modified":false},{"_id":"themes/hexo-theme-zan/source/js/modernizr.js","path":"js/modernizr.js","modified":false},{"_id":"themes/hexo-theme-zan/source/js/respond.min.js","path":"js/respond.min.js","modified":false},{"_id":"themes/hexo-theme-zan/source/js/zanblog.js","path":"js/zanblog.js","modified":false},{"_id":"themes/hexo-theme-zan/source/js/zanblog.min.js","path":"js/zanblog.min.js","modified":false},{"_id":"themes/hexo-theme-zan/source/js/jquery/jquery-migrate.min.js","path":"js/jquery/jquery-migrate.min.js","modified":false},{"_id":"themes/hexo-theme-zan/source/js/jquery/jquery.js","path":"js/jquery/jquery.js","modified":false}],"Cache":[{"_id":"scaffolds/draft.md","mtime":1406823288000},{"_id":"scaffolds/page.md","mtime":1406823288000},{"_id":"scaffolds/photo.md","mtime":1406823288000},{"_id":"scaffolds/post.md","mtime":1406823288000},{"_id":"source/_posts/basic-network.markdown","mtime":1406823288000},{"_id":"source/_posts/basic-tcl-command.markdown","mtime":1406823288000},{"_id":"source/_posts/canvas.markdown","mtime":1406828705000},{"_id":"source/_posts/hello-world.md","mtime":1406823288000},{"_id":"source/_posts/sample file for grunt.md","mtime":1406823288000},{"_id":"source/_posts/sample file for npm.md","mtime":1406823288000},{"_id":"source/_posts/using-nodejs-webkit.markdown","mtime":1406823288000},{"_id":"source/_posts/why-we-droped-our-dream.markdown","mtime":1406823288000},{"_id":"themes/hexo-theme-zan/README.md","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/_config.yml","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/languages/default.yml","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/languages/zh-CN.yml","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/layout/archive.ejs","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/layout/index.ejs","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/layout/category.ejs","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/layout/layout.ejs","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/layout/page.ejs","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/layout/post.ejs","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/layout/tag.ejs","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/layout/timeline.ejs","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/layout/_partial/archive.ejs","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/layout/_partial/article.ejs","mtime":1406826457000},{"_id":"themes/hexo-theme-zan/layout/_partial/footer.ejs","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/layout/_partial/header.ejs","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/layout/_partial/headscript.ejs","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/layout/_partial/headstyle.ejs","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/layout/_partial/navbar.ejs","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/layout/_partial/sidebar.ejs","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/layout/_partial/_widget/bookmarks.ejs","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/layout/_partial/_widget/categories.ejs","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/layout/_partial/_widget/cloud.ejs","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/layout/_partial/_widget/random.ejs","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/layout/_partial/_widget/tags.ejs","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/layout/_partial/_widget/timeline.ejs","mtime":1406825088000},{"_id":"themes/hexo-theme-zan/layout/_partial/post/categroy.ejs","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/layout/_partial/post/comment.ejs","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/layout/_partial/post/date.ejs","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/layout/_partial/post/gallery.ejs","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/layout/_partial/post/tag.ejs","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/layout/_partial/post/title.ejs","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/source/style.css","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/source/font/FontAwesome.otf","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/source/font/fontawesome-webfont.eot","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/source/font/fontawesome-webfont.svg","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/source/font/fontawesome-webfont.ttf","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/source/font/fontawesome-webfont.woff","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/source/images/arrow.png","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/source/images/arrow_hover.png","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/source/images/bg.jpg","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/source/images/logo.png","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/source/images/top.png","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/source/images/zanblog_ad.png","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/source/css/bootstrap.css","mtime":1406827256000},{"_id":"themes/hexo-theme-zan/source/css/custom.css","mtime":1406828397000},{"_id":"themes/hexo-theme-zan/source/css/docs.css","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/source/css/flat/_all.css","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/source/css/flat/aero.css","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/source/css/flat/aero.png","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/source/css/flat/aero@2x.png","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/source/css/flat/blue.css","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/source/css/flat/blue.png","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/source/css/flat/blue@2x.png","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/source/css/flat/flat.css","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/source/css/flat/flat.png","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/source/css/flat/flat@2x.png","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/source/css/flat/green.css","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/source/css/flat/green.png","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/source/css/flat/green@2x.png","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/source/css/flat/grey.css","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/source/css/flat/grey@2x.png","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/source/css/flat/grey.png","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/source/css/flat/orange.css","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/source/css/flat/orange.png","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/source/css/flat/orange@2x.png","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/source/css/flat/pink.css","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/source/css/flat/pink.png","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/source/css/flat/pink@2x.png","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/source/css/flat/purple.css","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/source/css/flat/purple.png","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/source/css/flat/purple@2x.png","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/source/css/flat/red.css","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/source/css/flat/red.png","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/source/css/flat/red@2x.png","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/source/css/flat/yellow.css","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/source/css/flat/yellow.png","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/source/css/flat/yellow@2x.png","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/source/font-awesome/css/font-awesome.min.css","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/source/font-awesome/css/font-awesome.css","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/source/font-awesome/fonts/FontAwesome.otf","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/source/font-awesome/fonts/fontawesome-webfont.eot","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/source/font-awesome/fonts/fontawesome-webfont.svg","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/source/font-awesome/fonts/fontawesome-webfont.ttf","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/source/font-awesome/fonts/fontawesome-webfont.woff","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/source/font-awesome/less/bordered-pulled.less","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/source/font-awesome/less/core.less","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/source/font-awesome/less/fixed-width.less","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/source/font-awesome/less/font-awesome.less","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/source/font-awesome/less/icons.less","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/source/font-awesome/less/larger.less","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/source/font-awesome/less/list.less","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/source/font-awesome/less/mixins.less","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/source/font-awesome/less/path.less","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/source/font-awesome/less/rotated-flipped.less","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/source/font-awesome/less/spinning.less","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/source/font-awesome/less/stacked.less","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/source/font-awesome/less/variables.less","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/source/font-awesome/scss/_bordered-pulled.scss","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/source/font-awesome/scss/_core.scss","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/source/font-awesome/scss/_fixed-width.scss","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/source/font-awesome/scss/_icons.scss","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/source/font-awesome/scss/_larger.scss","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/source/font-awesome/scss/_list.scss","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/source/font-awesome/scss/_mixins.scss","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/source/font-awesome/scss/_path.scss","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/source/font-awesome/scss/_rotated-flipped.scss","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/source/font-awesome/scss/_spinning.scss","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/source/font-awesome/scss/_stacked.scss","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/source/font-awesome/scss/_variables.scss","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/source/font-awesome/scss/font-awesome.scss","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/source/js/bootstrap.js","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/source/js/bootstrap.min.js","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/source/js/custom.js","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/source/js/html5shiv.js","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/source/js/jquery.icheck.js","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/source/js/modernizr.js","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/source/js/respond.min.js","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/source/js/zanblog.js","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/source/js/zanblog.min.js","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/source/js/jquery/jquery-migrate.min.js","mtime":1406824292000},{"_id":"themes/hexo-theme-zan/source/js/jquery/jquery.js","mtime":1406824292000}],"Category":[{"name":"javascript","_id":"9kug56bd03946e55","posts":["dj9p76nx80br4xyt"]},{"name":"nodejs","_id":"ly7spr8a7qp5r3ys","posts":["tvnr2k7316gf5yfv","ghjp5eeitf8uxsz8","amkx8en5rauszs4c"]},{"name":"feeling","_id":"3n43sr26nb5rkg3y","posts":["15uyt8kztufr4x8r"]},{"name":"network","_id":"d4vqbigdptmbnv6l","posts":["v44hfqle48lm6gh8"]},{"name":"Tcl","_id":"wskeunpczarf4iei","posts":["k46ebt15e9x60mji"]}],"Page":[],"Post":[{"title":"Canvas API","layout":"post","img_src":"/img/html5.jpg","description":"Canvas基础","content":"<h2 id=\"概述\">概述</h2>\n<p>Canvas用于在网页展示图像，并且可以定制内容，基本上它是一个可以用JavaScript操作的位图（bitmap）。<br>Canvas API用于网页实时生成图像，JavaScript通过API来操作图像内容。这样做的优点是：减少HTTP请求数，减少下载的数据，加快网页载入时间，可以对图像进行实时处理。<br>使用前，首先需要新建一个canvas网页元素。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">canvas</span> <span class=\"attribute\">id</span>=<span class=\"value\">\"myCanvas\"</span> <span class=\"attribute\">width</span>=<span class=\"value\">\"400\"</span> <span class=\"attribute\">height</span>=<span class=\"value\">\"200\"</span>&gt;</span></div><div class=\"line\">\t您的浏览器不支持canvas！</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"title\">canvas</span>&gt;</span></div></pre></td></tr></table></figure>\n\n<p>如果浏览器不支持这个API，则就会显示canvas标签中间的文字——“您的浏览器不支持canvas！”。</p>\n<p>然后，使用JavaScript获取canvas的DOM对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> canvas = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'myCanvas'</span>);</div></pre></td></tr></table></figure>\n\n<p>接着，检查浏览器是否支持Canvas API，方法是看有没有部署getContext方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (canvas.getContext) {</div><div class=\"line\">\t<span class=\"comment\">// some code here</span></div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>使用getContext(‘2d’)方法，初始化平面图像的上下文环境。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> ctx = canvas.getContext(<span class=\"string\">'2d'</span>);</div></pre></td></tr></table></figure>\n\n<p>现在就在canvas中间生成平面图像了。</p>\n<h2 id=\"绘图方法\">绘图方法</h2>\n<p>（1）填充颜色</p>\n<p>设置填充颜色。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ctx.fillStyle = <span class=\"string\">\"#000000\"</span>; <span class=\"comment\">// 设置填充色为黑色</span></div></pre></td></tr></table></figure>\n\n<p>（2）绘制矩形</p>\n<p>绘制实心矩形。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ctx.fillRect(<span class=\"number\">10</span>,<span class=\"number\">10</span>,<span class=\"number\">200</span>,<span class=\"number\">100</span>);</div></pre></td></tr></table></figure>\n\n<p>绘制空心矩形。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ctx.strokeRect(<span class=\"number\">10</span>,<span class=\"number\">10</span>,<span class=\"number\">200</span>,<span class=\"number\">100</span>);</div></pre></td></tr></table></figure>\n\n<p>清除某个矩形区域的内容。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ctx.clearRect(<span class=\"number\">100</span>,<span class=\"number\">50</span>,<span class=\"number\">50</span>,<span class=\"number\">50</span>);</div></pre></td></tr></table></figure>\n\n<p>（3）绘制路径</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">ctx.beginPath(); <span class=\"comment\">// 开始路径绘制</span></div><div class=\"line\">ctx.moveTo(<span class=\"number\">20</span>, <span class=\"number\">20</span>); <span class=\"comment\">// 设置路径起点</span></div><div class=\"line\">ctx.lineTo(<span class=\"number\">200</span>, <span class=\"number\">20</span>); <span class=\"comment\">// 绘制一条到200, 20的直线</span></div><div class=\"line\">ctx.lineWidth = <span class=\"number\">1.0</span>; <span class=\"comment\">// 设置线宽</span></div><div class=\"line\">ctx.strokeStyle = <span class=\"string\">\"#CC0000\"</span>; <span class=\"comment\">// 设置线的颜色</span></div><div class=\"line\">ctx.stroke(); <span class=\"comment\">// 进行线的着色，这时整条线才变得可见</span></div></pre></td></tr></table></figure>\n\n<p>moveto和lineto方法可以多次使用。最后，还可以使用closePath方法，自动绘制一条当前点到起点的直线，形成一个封闭图形，省却使用以此lineto方法。</p>\n<p>（4）绘制圆形和扇形</p>\n<p>绘制扇形的方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ctx.arc(x, y, radius, startAngle, endAngle, anticlockwise);</div></pre></td></tr></table></figure>\n\n<p>arc方法的x和y参数是圆心坐标，radius是半径，startAngle和endAngle则是扇形的起始角度和终止角度（以弧度表示），anticlockwise表示做图时应该逆时针画（true）还是顺时针画（false）。</p>\n<p>绘制实心的圆形。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">ctx.beginPath(); </div><div class=\"line\">ctx.arc(<span class=\"number\">60</span>, <span class=\"number\">60</span>, <span class=\"number\">50</span>, <span class=\"number\">0</span>, <span class=\"built_in\">Math</span>.PI*<span class=\"number\">2</span>, <span class=\"literal\">true</span>); </div><div class=\"line\">ctx.fillStyle = <span class=\"string\">\"#000000\"</span>; </div><div class=\"line\">ctx.fill();</div></pre></td></tr></table></figure>\n\n<p>绘制空心圆形。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">ctx.beginPath(); </div><div class=\"line\">ctx.arc(<span class=\"number\">60</span>, <span class=\"number\">60</span>, <span class=\"number\">50</span>, <span class=\"number\">0</span>, <span class=\"built_in\">Math</span>.PI*<span class=\"number\">2</span>, <span class=\"literal\">true</span>); </div><div class=\"line\">ctx.lineWidth = <span class=\"number\">1.0</span>; </div><div class=\"line\">ctx.strokeStyle = <span class=\"string\">\"#000\"</span>; </div><div class=\"line\">ctx.stroke();</div></pre></td></tr></table></figure>\n\n<p>（5）绘制文本</p>\n<p>fillText方法用于添加文本，strokeText方法用于添加空心字。使用之前，需设定字体、对齐方向、颜色等属性。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">ctx.font = <span class=\"string\">\"Bold 20px Arial\"</span>; <span class=\"comment\">// 设置字体</span></div><div class=\"line\">ctx.textAlign = <span class=\"string\">\"left\"</span>; <span class=\"comment\">// 设置对齐方式</span></div><div class=\"line\">ctx.fillStyle = <span class=\"string\">\"#008600\"</span>; <span class=\"comment\">// 设置填充颜色</span></div><div class=\"line\">ctx.fillText(<span class=\"string\">\"Hello!\"</span>, <span class=\"number\">10</span>, <span class=\"number\">50</span>); <span class=\"comment\">// 设置字体内容，以及在画布上的位置</span></div><div class=\"line\">ctx.strokeText(<span class=\"string\">'Hello!\", 10, 100); // 绘制空心字</span></div></pre></td></tr></table></figure>\n\n<p>fillText方法不支持文本断行，即所有文本出现在一行内。所以，如果你要生成多行文本，只有调用多次fillText方法。</p>\n<h3 id=\"渐变\">渐变</h3>\n<p>设置渐变色。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> myGradient = ctx.createLinearGradient(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">160</span>); </div><div class=\"line\">myGradient.addColorStop(<span class=\"number\">0</span>, <span class=\"string\">\"#BABABA\"</span>); </div><div class=\"line\">myGradient.addColorStop(<span class=\"number\">1</span>, <span class=\"string\">\"#636363\"</span>);</div></pre></td></tr></table></figure>\n\n<p>createLinearGradient方法的参数是(x1, y1, x2, y2)，其中x1和y1是起点坐标，x2和y2是终点坐标。通过不同的坐标值，可以生成从上至下、从左到右的渐变等等。</p>\n<p>使用方法如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">ctx.fillStyle = myGradient;</div><div class=\"line\">ctx.fillRect(<span class=\"number\">10</span>,<span class=\"number\">10</span>,<span class=\"number\">200</span>,<span class=\"number\">100</span>);</div></pre></td></tr></table></figure>\n\n<h3 id=\"阴影\">阴影</h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">ctx.shadowOffsetX = <span class=\"number\">10</span>; <span class=\"comment\">// 设置水平位移</span></div><div class=\"line\">ctx.shadowOffsetY = <span class=\"number\">10</span>; <span class=\"comment\">// 设置垂直位移</span></div><div class=\"line\">ctx.shadowBlur = <span class=\"number\">5</span>; <span class=\"comment\">// 设置模糊度</span></div><div class=\"line\">ctx.shadowColor = <span class=\"string\">\"rgba(0,0,0,0.5)\"</span>; <span class=\"comment\">// 设置阴影颜色</span></div><div class=\"line\">ctx.fillStyle = <span class=\"string\">\"#CC0000\"</span>; </div><div class=\"line\">ctx.fillRect(<span class=\"number\">10</span>,<span class=\"number\">10</span>,<span class=\"number\">200</span>,<span class=\"number\">100</span>);</div></pre></td></tr></table></figure>\n\n<h2 id=\"图像处理方法\">图像处理方法</h2>\n<h3 id=\"插入图像\">插入图像</h3>\n<p>canvas允许将图像文件插入画布，做法是读取图片后，使用drawImage方法在画布内进行重绘。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> img = <span class=\"keyword\">new</span> Image();</div><div class=\"line\">img.src = <span class=\"string\">\"image.png\"</span>;</div><div class=\"line\">ctx.drawImage(img, <span class=\"number\">0</span>, <span class=\"number\">0</span>); <span class=\"comment\">// 设置对应的图像对象，以及它在画布上的位置</span></div></pre></td></tr></table></figure>\n\n<p>由于图像的载入需要时间，drawImage方法只能在图像完全载入后才能调用，因此上面的代码需要改写。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> image = <span class=\"keyword\">new</span> Image(); </div><div class=\"line\">image.onload = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>{ </div><div class=\"line\">\t<span class=\"keyword\">if</span> (image.width != canvas.width)</div><div class=\"line\">        canvas.width = image.width;</div><div class=\"line\">    <span class=\"keyword\">if</span> (image.height != canvas.height)</div><div class=\"line\">        canvas.height = image.height;</div><div class=\"line\">\tctx.clearRect(<span class=\"number\">0</span>, <span class=\"number\">0</span>, canvas.width, canvas.height);</div><div class=\"line\">    ctx.drawImage(image, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">} </div><div class=\"line\">image.src = <span class=\"string\">\"image.png\"</span>;</div></pre></td></tr></table></figure>\n\n<p>drawImage()方法接受三个参数，第一个参数是图像文件的DOM元素（即img标签），第二个和第三个参数是图像左上角在Canvas元素中的坐标，上例中的（0, 0）就表示将图像左上角放置在Canvas元素的左上角。</p>\n<h3 id=\"读取Canvas的内容\">读取Canvas的内容</h3>\n<p>getImageData方法可以用来读取Canvas的内容，返回一个对象，包含了每个像素的信息。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> imageData = context.getImageData(<span class=\"number\">0</span>, <span class=\"number\">0</span>, canvas.width, canvas.height);</div></pre></td></tr></table></figure>\n\n<p>imageData对象有一个data属性，它的值是一个一维数组。该数组的值，依次是每个像素的红、绿、蓝、alpha通道值，因此该数组的长度等于 图像的像素宽度 x 图像的像素高度 x 4，每个值的范围是0–255。这个数组不仅可读，而且可写，因此通过操作这个数组的值，就可以达到操作图像的目的。修改这个数组以后，使用putImageData方法将数组内容重新回Canvas。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">context.putImageData(imageData, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</div></pre></td></tr></table></figure>\n\n<h3 id=\"像素处理\">像素处理</h3>\n<p>假定filter是一个处理像素的函数，那么整个对Canvas的处理流程，可以用下面的代码表示。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (canvas.width &gt; <span class=\"number\">0</span> && canvas.height &gt; <span class=\"number\">0</span>) {</div><div class=\"line\">\t<span class=\"keyword\">var</span> imageData = context.getImageData(<span class=\"number\">0</span>, <span class=\"number\">0</span>, canvas.width, canvas.height);</div><div class=\"line\">    filter(imageData);</div><div class=\"line\">    context.putImageData(imageData, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>以下是几种常见的处理方法。</p>\n<p>（1）灰度效果</p>\n<p>灰度图（grayscale）就是取红、绿、蓝三个像素值的算术平均值，这实际上将图像转成了黑白形式。假定d[i]是像素数组中一个象素的红色值，则d[i+1]为绿色值，d[i+2]为蓝色值，d[i+3]就是alpha通道值。转成灰度的算法，就是将红、绿、蓝三个值相加后除以3，再将结果写回数组。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">grayscale = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(pixels)</span> </span>{</div><div class=\"line\">\t<span class=\"keyword\">var</span> d = pixels.data;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; d.length; i += <span class=\"number\">4</span>) {</div><div class=\"line\">      <span class=\"keyword\">var</span> r = d[i];</div><div class=\"line\">      <span class=\"keyword\">var</span> g = d[i + <span class=\"number\">1</span>];</div><div class=\"line\">      <span class=\"keyword\">var</span> b = d[i + <span class=\"number\">2</span>];</div><div class=\"line\">      d[i] = d[i + <span class=\"number\">1</span>] = d[i + <span class=\"number\">2</span>] = (r+g+b)/<span class=\"number\">3</span>;</div><div class=\"line\">    }</div><div class=\"line\">    <span class=\"keyword\">return</span> pixels;</div><div class=\"line\">};</div></pre></td></tr></table></figure>\n\n<p>（2）复古效果</p>\n<p>复古效果（sepia）则是将红、绿、蓝三个像素，分别取这三个值的某种加权平均值，使得图像有一种古旧的效果。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">sepia = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(pixels)</span> </span>{</div><div class=\"line\">    <span class=\"keyword\">var</span> d = pixels.data;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; d.length; i += <span class=\"number\">4</span>) {</div><div class=\"line\">      <span class=\"keyword\">var</span> r = d[i];</div><div class=\"line\">      <span class=\"keyword\">var</span> g = d[i + <span class=\"number\">1</span>];</div><div class=\"line\">      <span class=\"keyword\">var</span> b = d[i + <span class=\"number\">2</span>];</div><div class=\"line\">      d[i]     = (r * <span class=\"number\">0.393</span>)+(g * <span class=\"number\">0.769</span>)+(b * <span class=\"number\">0.189</span>); <span class=\"comment\">// red</span></div><div class=\"line\">      d[i + <span class=\"number\">1</span>] = (r * <span class=\"number\">0.349</span>)+(g * <span class=\"number\">0.686</span>)+(b * <span class=\"number\">0.168</span>); <span class=\"comment\">// green</span></div><div class=\"line\">      d[i + <span class=\"number\">2</span>] = (r * <span class=\"number\">0.272</span>)+(g * <span class=\"number\">0.534</span>)+(b * <span class=\"number\">0.131</span>); <span class=\"comment\">// blue</span></div><div class=\"line\">    }</div><div class=\"line\">    <span class=\"keyword\">return</span> pixels;</div><div class=\"line\">};</div></pre></td></tr></table></figure>\n\n<p>（3）红色蒙版效果</p>\n<p>红色蒙版指的是，让图像呈现一种偏红的效果。算法是将红色通道设为红、绿、蓝三个值的平均值，而将绿色通道和蓝色通道都设为0。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">red = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(pixels)</span> </span>{\t</div><div class=\"line\">    <span class=\"keyword\">var</span> d = pixels.data;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; d.length; i += <span class=\"number\">4</span>) {</div><div class=\"line\">      <span class=\"keyword\">var</span> r = d[i];</div><div class=\"line\">      <span class=\"keyword\">var</span> g = d[i + <span class=\"number\">1</span>];</div><div class=\"line\">      <span class=\"keyword\">var</span> b = d[i + <span class=\"number\">2</span>];</div><div class=\"line\">      d[i] = (r+g+b)/<span class=\"number\">3</span>;        <span class=\"comment\">// 红色通道取平均值</span></div><div class=\"line\">      d[i + <span class=\"number\">1</span>] = d[i + <span class=\"number\">2</span>] = <span class=\"number\">0</span>; <span class=\"comment\">// 绿色通道和蓝色通道都设为0</span></div><div class=\"line\">    }</div><div class=\"line\">    <span class=\"keyword\">return</span> pixels;</div><div class=\"line\">};</div></pre></td></tr></table></figure>\n\n<p>（4）亮度效果</p>\n<p>亮度效果（brightness）是指让图像变得更亮或更暗。算法将红色通道、绿色通道、蓝色通道，同时加上一个正值或负值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">brightness = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(pixels, delta)</span> </span>{</div><div class=\"line\">    <span class=\"keyword\">var</span> d = pixels.data;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; d.length; i += <span class=\"number\">4</span>) {</div><div class=\"line\">          d[i] += delta;     <span class=\"comment\">// red</span></div><div class=\"line\">          d[i + <span class=\"number\">1</span>] += delta; <span class=\"comment\">// green</span></div><div class=\"line\">          d[i + <span class=\"number\">2</span>] += delta; <span class=\"comment\">// blue   </span></div><div class=\"line\">    }</div><div class=\"line\">\t<span class=\"keyword\">return</span> pixels;</div><div class=\"line\">};</div></pre></td></tr></table></figure>\n\n<p>（5）反转效果</p>\n<p>反转效果（invert）是值图片呈现一种色彩颠倒的效果。算法为红、绿、蓝通道都取各自的相反值（255-原值）。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">invert = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(pixels)</span> </span>{</div><div class=\"line\">\t<span class=\"keyword\">var</span> d = pixels.data;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; d.length; i += <span class=\"number\">4</span>) {</div><div class=\"line\">\t\td[i] = <span class=\"number\">255</span> - d[i];</div><div class=\"line\">\t\td[i+<span class=\"number\">1</span>] = <span class=\"number\">255</span> - d[i + <span class=\"number\">1</span>];</div><div class=\"line\">\t\td[i+<span class=\"number\">2</span>] = <span class=\"number\">255</span> - d[i + <span class=\"number\">2</span>];</div><div class=\"line\">\t}</div><div class=\"line\">\t<span class=\"keyword\">return</span> pixels;</div><div class=\"line\">};</div></pre></td></tr></table></figure>\n\n<h3 id=\"将Canvas转化为图像文件\">将Canvas转化为图像文件</h3>\n<p>对图像数据做出修改以后，可以使用toDataURL方法，将Canvas数据重新转化成一般的图像文件形式。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">convertCanvasToImage</span><span class=\"params\">(canvas)</span> </span>{</div><div class=\"line\">  <span class=\"keyword\">var</span> image = <span class=\"keyword\">new</span> Image();</div><div class=\"line\">  image.src = canvas.toDataURL(<span class=\"string\">\"image/png\"</span>);</div><div class=\"line\">  <span class=\"keyword\">return</span> image;</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>上面的代码将Canvas数据，转化成PNG data URI。</p>\n<h2 id=\"保存和恢复上下文\">保存和恢复上下文</h2>\n<p>save方法用于保存上下文环境，restore方法用于恢复到上一次保存的上下文环境。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">ctx.save(); </div><div class=\"line\">ctx.shadowOffsetX = <span class=\"number\">10</span>;</div><div class=\"line\">ctx.shadowOffsetY = <span class=\"number\">10</span>;</div><div class=\"line\">ctx.shadowBlur = <span class=\"number\">5</span>;</div><div class=\"line\">ctx.shadowColor = <span class=\"string\">\"rgba(0,0,0,0.5)\"</span>;</div><div class=\"line\">ctx.fillStyle = <span class=\"string\">\"#CC0000\"</span>;</div><div class=\"line\">ctx.fillRect(<span class=\"number\">10</span>,<span class=\"number\">10</span>,<span class=\"number\">150</span>,<span class=\"number\">100</span>);</div><div class=\"line\">ctx.restore(); </div><div class=\"line\">ctx.fillStyle = <span class=\"string\">\"#000000\"</span>;</div><div class=\"line\">ctx.fillRect(<span class=\"number\">180</span>,<span class=\"number\">10</span>,<span class=\"number\">150</span>,<span class=\"number\">100</span>);</div></pre></td></tr></table></figure>\n\n<p>上面的代码一共绘制了两个矩形，前一个有阴影，后一个没有。</p>\n<h2 id=\"参考链接\">参考链接</h2>\n<ul>\n<li>David Walsh, <a href=\"http://davidwalsh.name/convert-canvas-image\" target=\"_blank\" rel=\"external\">JavaScript Canvas Image Conversion</a></li>\n<li>Matt West, <a href=\"http://blog.teamtreehouse.com/getting-started-with-the-canvas-api\" target=\"_blank\" rel=\"external\">Getting Started With The Canvas API</a></li>\n<li>John Robinson, <a href=\"http://www.storminthecastle.com/2013/04/06/how-you-can-do-cool-image-effects-using-html5-canvas/\" target=\"_blank\" rel=\"external\">How You Can Do Cool Image Effects Using HTML5 Canvas</a></li>\n</ul>\n","source":"_posts/canvas.markdown","raw":"---\ntitle: Canvas API\nlayout: post\ncategory: javascript\nimg_src: \"/img/html5.jpg\"\ndescription: \"Canvas基础\"\n---\n\n## 概述\n\nCanvas用于在网页展示图像，并且可以定制内容，基本上它是一个可以用JavaScript操作的位图（bitmap）。\nCanvas API用于网页实时生成图像，JavaScript通过API来操作图像内容。这样做的优点是：减少HTTP请求数，减少下载的数据，加快网页载入时间，可以对图像进行实时处理。\n使用前，首先需要新建一个canvas网页元素。\n\n``` html\n<canvas id=\"myCanvas\" width=\"400\" height=\"200\">\n\t您的浏览器不支持canvas！\n</canvas>\n```\n\n如果浏览器不支持这个API，则就会显示canvas标签中间的文字——“您的浏览器不支持canvas！”。\n\n然后，使用JavaScript获取canvas的DOM对象。\n\n``` javascript\nvar canvas = document.getElementById('myCanvas');\n```\n\n接着，检查浏览器是否支持Canvas API，方法是看有没有部署getContext方法。\n\n``` javascript\nif (canvas.getContext) {\n\t// some code here\n}\n```\n\n使用getContext('2d')方法，初始化平面图像的上下文环境。\n\n``` javascript\nvar ctx = canvas.getContext('2d');\n```\n\n现在就在canvas中间生成平面图像了。\n\n## 绘图方法\n\n（1）填充颜色\n\n设置填充颜色。\n\n``` javascript\nctx.fillStyle = \"#000000\"; // 设置填充色为黑色\n```\n\n（2）绘制矩形\n\n绘制实心矩形。\n\n``` javascript\nctx.fillRect(10,10,200,100); \n```\n\n绘制空心矩形。\n\n``` javascript\nctx.strokeRect(10,10,200,100); \n```\n\n清除某个矩形区域的内容。\n\n``` javascript\nctx.clearRect(100,50,50,50);  \n```\n\n（3）绘制路径\n\n``` javascript\nctx.beginPath(); // 开始路径绘制\nctx.moveTo(20, 20); // 设置路径起点\nctx.lineTo(200, 20); // 绘制一条到200, 20的直线\nctx.lineWidth = 1.0; // 设置线宽\nctx.strokeStyle = \"#CC0000\"; // 设置线的颜色\nctx.stroke(); // 进行线的着色，这时整条线才变得可见\n```\n\nmoveto和lineto方法可以多次使用。最后，还可以使用closePath方法，自动绘制一条当前点到起点的直线，形成一个封闭图形，省却使用以此lineto方法。\n\n（4）绘制圆形和扇形\n\n绘制扇形的方法。\n\n``` javascript\nctx.arc(x, y, radius, startAngle, endAngle, anticlockwise);\n```\n\narc方法的x和y参数是圆心坐标，radius是半径，startAngle和endAngle则是扇形的起始角度和终止角度（以弧度表示），anticlockwise表示做图时应该逆时针画（true）还是顺时针画（false）。\n\n绘制实心的圆形。\n\n``` javascript\nctx.beginPath(); \nctx.arc(60, 60, 50, 0, Math.PI*2, true); \nctx.fillStyle = \"#000000\"; \nctx.fill();\n```\n\n绘制空心圆形。\n\n``` javascript\nctx.beginPath(); \nctx.arc(60, 60, 50, 0, Math.PI*2, true); \nctx.lineWidth = 1.0; \nctx.strokeStyle = \"#000\"; \nctx.stroke();\n```\n\n（5）绘制文本\n\nfillText方法用于添加文本，strokeText方法用于添加空心字。使用之前，需设定字体、对齐方向、颜色等属性。\n\n``` javascript\nctx.font = \"Bold 20px Arial\"; // 设置字体\nctx.textAlign = \"left\"; // 设置对齐方式\nctx.fillStyle = \"#008600\"; // 设置填充颜色\nctx.fillText(\"Hello!\", 10, 50); // 设置字体内容，以及在画布上的位置\nctx.strokeText('Hello!\", 10, 100); // 绘制空心字\n```\n\nfillText方法不支持文本断行，即所有文本出现在一行内。所以，如果你要生成多行文本，只有调用多次fillText方法。\n\n### 渐变\n\n设置渐变色。\n\n``` javascript\nvar myGradient = ctx.createLinearGradient(0, 0, 0, 160); \nmyGradient.addColorStop(0, \"#BABABA\"); \nmyGradient.addColorStop(1, \"#636363\");\n```\n\ncreateLinearGradient方法的参数是(x1, y1, x2, y2)，其中x1和y1是起点坐标，x2和y2是终点坐标。通过不同的坐标值，可以生成从上至下、从左到右的渐变等等。\n\n使用方法如下：\n\n``` javascript\nctx.fillStyle = myGradient;\nctx.fillRect(10,10,200,100);\n```\n\n### 阴影\n\n``` javascript\nctx.shadowOffsetX = 10; // 设置水平位移\nctx.shadowOffsetY = 10; // 设置垂直位移\nctx.shadowBlur = 5; // 设置模糊度\nctx.shadowColor = \"rgba(0,0,0,0.5)\"; // 设置阴影颜色\nctx.fillStyle = \"#CC0000\"; \nctx.fillRect(10,10,200,100);\n```\n\n## 图像处理方法\n\n### 插入图像\n\ncanvas允许将图像文件插入画布，做法是读取图片后，使用drawImage方法在画布内进行重绘。\n\n``` javascript\nvar img = new Image();\nimg.src = \"image.png\";\nctx.drawImage(img, 0, 0); // 设置对应的图像对象，以及它在画布上的位置\n```\n\n由于图像的载入需要时间，drawImage方法只能在图像完全载入后才能调用，因此上面的代码需要改写。\n\n``` javascript\nvar image = new Image(); \nimage.onload = function() { \n\tif (image.width != canvas.width)\n        canvas.width = image.width;\n    if (image.height != canvas.height)\n        canvas.height = image.height;\n\tctx.clearRect(0, 0, canvas.width, canvas.height);\n    ctx.drawImage(image, 0, 0);\n} \nimage.src = \"image.png\";\n```\n\ndrawImage()方法接受三个参数，第一个参数是图像文件的DOM元素（即img标签），第二个和第三个参数是图像左上角在Canvas元素中的坐标，上例中的（0, 0）就表示将图像左上角放置在Canvas元素的左上角。\n\n### 读取Canvas的内容\n\ngetImageData方法可以用来读取Canvas的内容，返回一个对象，包含了每个像素的信息。\n\n``` javascript\nvar imageData = context.getImageData(0, 0, canvas.width, canvas.height);\n```\n\nimageData对象有一个data属性，它的值是一个一维数组。该数组的值，依次是每个像素的红、绿、蓝、alpha通道值，因此该数组的长度等于 图像的像素宽度 x 图像的像素高度 x 4，每个值的范围是0–255。这个数组不仅可读，而且可写，因此通过操作这个数组的值，就可以达到操作图像的目的。修改这个数组以后，使用putImageData方法将数组内容重新回Canvas。\n\n``` javascript\ncontext.putImageData(imageData, 0, 0);\n```\n\n### 像素处理\n\n假定filter是一个处理像素的函数，那么整个对Canvas的处理流程，可以用下面的代码表示。\n\n``` javascript\nif (canvas.width > 0 && canvas.height > 0) {\n\tvar imageData = context.getImageData(0, 0, canvas.width, canvas.height);\n    filter(imageData);\n    context.putImageData(imageData, 0, 0);\n}\n```\n\n以下是几种常见的处理方法。\n\n（1）灰度效果\n\n灰度图（grayscale）就是取红、绿、蓝三个像素值的算术平均值，这实际上将图像转成了黑白形式。假定d[i]是像素数组中一个象素的红色值，则d[i+1]为绿色值，d[i+2]为蓝色值，d[i+3]就是alpha通道值。转成灰度的算法，就是将红、绿、蓝三个值相加后除以3，再将结果写回数组。\n\n``` javascript\ngrayscale = function (pixels) {\n\tvar d = pixels.data;\n    for (var i = 0; i < d.length; i += 4) {\n      var r = d[i];\n      var g = d[i + 1];\n      var b = d[i + 2];\n      d[i] = d[i + 1] = d[i + 2] = (r+g+b)/3;\n    }\n    return pixels;\n};\n```\n（2）复古效果\n\n复古效果（sepia）则是将红、绿、蓝三个像素，分别取这三个值的某种加权平均值，使得图像有一种古旧的效果。\n\n``` javascript\nsepia = function (pixels) {\n    var d = pixels.data;\n    for (var i = 0; i < d.length; i += 4) {\n      var r = d[i];\n      var g = d[i + 1];\n      var b = d[i + 2];\n      d[i]     = (r * 0.393)+(g * 0.769)+(b * 0.189); // red\n      d[i + 1] = (r * 0.349)+(g * 0.686)+(b * 0.168); // green\n      d[i + 2] = (r * 0.272)+(g * 0.534)+(b * 0.131); // blue\n    }\n    return pixels;\n};\n```\n\n（3）红色蒙版效果\n\n红色蒙版指的是，让图像呈现一种偏红的效果。算法是将红色通道设为红、绿、蓝三个值的平均值，而将绿色通道和蓝色通道都设为0。\n\n``` javascript\nred = function (pixels) {\t\n    var d = pixels.data;\n    for (var i = 0; i < d.length; i += 4) {\n      var r = d[i];\n      var g = d[i + 1];\n      var b = d[i + 2];\n      d[i] = (r+g+b)/3;        // 红色通道取平均值\n      d[i + 1] = d[i + 2] = 0; // 绿色通道和蓝色通道都设为0\n    }\n    return pixels;\n};\n```\n\n（4）亮度效果\n\n亮度效果（brightness）是指让图像变得更亮或更暗。算法将红色通道、绿色通道、蓝色通道，同时加上一个正值或负值。\n\n``` javascript\nbrightness = function (pixels, delta) {\n    var d = pixels.data;\n    for (var i = 0; i < d.length; i += 4) {\n          d[i] += delta;     // red\n          d[i + 1] += delta; // green\n          d[i + 2] += delta; // blue   \n    }\n\treturn pixels;\n};\n```\n\n（5）反转效果\n\n反转效果（invert）是值图片呈现一种色彩颠倒的效果。算法为红、绿、蓝通道都取各自的相反值（255-原值）。\n\n``` javascript\ninvert = function (pixels) {\n\tvar d = pixels.data;\n\tfor (var i = 0; i < d.length; i += 4) {\n\t\td[i] = 255 - d[i];\n\t\td[i+1] = 255 - d[i + 1];\n\t\td[i+2] = 255 - d[i + 2];\n\t}\n\treturn pixels;\n};\n```\n\n### 将Canvas转化为图像文件\n\n对图像数据做出修改以后，可以使用toDataURL方法，将Canvas数据重新转化成一般的图像文件形式。\n\n``` javascript\nfunction convertCanvasToImage(canvas) {\n  var image = new Image();\n  image.src = canvas.toDataURL(\"image/png\");\n  return image;\n}\n```\n\n上面的代码将Canvas数据，转化成PNG data URI。\n\n## 保存和恢复上下文\n\nsave方法用于保存上下文环境，restore方法用于恢复到上一次保存的上下文环境。\n\n``` javascript\nctx.save(); \nctx.shadowOffsetX = 10;\nctx.shadowOffsetY = 10;\nctx.shadowBlur = 5;\nctx.shadowColor = \"rgba(0,0,0,0.5)\";\nctx.fillStyle = \"#CC0000\";\nctx.fillRect(10,10,150,100);\nctx.restore(); \nctx.fillStyle = \"#000000\";\nctx.fillRect(180,10,150,100); \n```\n\n上面的代码一共绘制了两个矩形，前一个有阴影，后一个没有。\n\n## 参考链接\n\n- David Walsh, [JavaScript Canvas Image Conversion](http://davidwalsh.name/convert-canvas-image)\n- Matt West, [Getting Started With The Canvas API](http://blog.teamtreehouse.com/getting-started-with-the-canvas-api)\n- John Robinson, [How You Can Do Cool Image Effects Using HTML5 Canvas](http://www.storminthecastle.com/2013/04/06/how-you-can-do-cool-image-effects-using-html5-canvas/)","slug":"canvas","date":1406829113000,"updated":1406829113000,"categories":["9kug56bd03946e55"],"excerpt":"","_id":"dj9p76nx80br4xyt","tags":[],"comments":true,"photos":[],"link":""},{"title":"Hello World","content":"<p>Welcome to <a href=\"http://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"http://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"http://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">trobuleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick_Start\">Quick Start</h2>\n<h3 id=\"Create_a_new_post\">Create a new post</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"http://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run_server\">Run server</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"http://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate_static_files\">Generate static files</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"http://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy_to_remote_sites\">Deploy to remote sites</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"http://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","source":"_posts/hello-world.md","raw":"title: Hello World\n---\nWelcome to [Hexo](http://hexo.io/)! This is your very first post. Check [documentation](http://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [trobuleshooting](http://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](http://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](http://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](http://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](http://hexo.io/docs/deployment.html)","slug":"hello-world","date":1406823288000,"updated":1406823288000,"excerpt":"","_id":"qs0w40tynguzf5mo","categories":[],"tags":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"Sample file for grunt","categories":["ly7spr8a7qp5r3ys"],"content":"<h1 id=\"Sample_file_for_grunt\">Sample file for grunt</h1>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(grunt)</span> </span>{</div><div class=\"line\"></div><div class=\"line\">  grunt.initConfig({</div><div class=\"line\">    pkg: grunt.file.readJSON(<span class=\"string\">'package.json'</span>),</div><div class=\"line\">    concat: {</div><div class=\"line\">      options: {</div><div class=\"line\">        separator: <span class=\"string\">';'</span></div><div class=\"line\">      },</div><div class=\"line\">      dist: {</div><div class=\"line\">        src: [<span class=\"string\">'src/**/*.js'</span>],</div><div class=\"line\">        dest: <span class=\"string\">'dist/&lt;%= pkg.name %&gt;.js'</span></div><div class=\"line\">      }</div><div class=\"line\">    },</div><div class=\"line\">    uglify: {</div><div class=\"line\">      options: {</div><div class=\"line\">        banner: <span class=\"string\">'/*! &lt;%= pkg.name %&gt; &lt;%= grunt.template.today(\"dd-mm-yyyy\") %&gt; */\\n'</span></div><div class=\"line\">      },</div><div class=\"line\">      dist: {</div><div class=\"line\">        files: {</div><div class=\"line\">          <span class=\"string\">'dist/&lt;%= pkg.name %&gt;.min.js'</span>: [<span class=\"string\">'&lt;%= concat.dist.dest %&gt;'</span>]</div><div class=\"line\">        }</div><div class=\"line\">      }</div><div class=\"line\">    },</div><div class=\"line\">    qunit: {</div><div class=\"line\">      files: [<span class=\"string\">'test/**/*.html'</span>]</div><div class=\"line\">    },</div><div class=\"line\">    jshint: {</div><div class=\"line\">      files: [<span class=\"string\">'Gruntfile.js'</span>, <span class=\"string\">'src/**/*.js'</span>, <span class=\"string\">'test/**/*.js'</span>],</div><div class=\"line\">      options: {</div><div class=\"line\">        <span class=\"comment\">//这里是覆盖JSHint默认配置的选项</span></div><div class=\"line\">        globals: {</div><div class=\"line\">          jQuery: <span class=\"literal\">true</span>,</div><div class=\"line\">          <span class=\"built_in\">console</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">          <span class=\"built_in\">module</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">          <span class=\"built_in\">document</span>: <span class=\"literal\">true</span></div><div class=\"line\">        }</div><div class=\"line\">      }</div><div class=\"line\">    },</div><div class=\"line\">    watch: {</div><div class=\"line\">      files: [<span class=\"string\">'&lt;%= jshint.files %&gt;'</span>],</div><div class=\"line\">      tasks: [<span class=\"string\">'jshint'</span>, <span class=\"string\">'qunit'</span>]</div><div class=\"line\">    }</div><div class=\"line\">  });</div><div class=\"line\"></div><div class=\"line\">  grunt.loadNpmTasks(<span class=\"string\">'grunt-contrib-uglify'</span>);</div><div class=\"line\">  grunt.loadNpmTasks(<span class=\"string\">'grunt-contrib-jshint'</span>);</div><div class=\"line\">  grunt.loadNpmTasks(<span class=\"string\">'grunt-contrib-qunit'</span>);</div><div class=\"line\">  grunt.loadNpmTasks(<span class=\"string\">'grunt-contrib-watch'</span>);</div><div class=\"line\">  grunt.loadNpmTasks(<span class=\"string\">'grunt-contrib-concat'</span>);</div><div class=\"line\"></div><div class=\"line\">  grunt.registerTask(<span class=\"string\">'test'</span>, [<span class=\"string\">'jshint'</span>, <span class=\"string\">'qunit'</span>]);</div><div class=\"line\"></div><div class=\"line\">  grunt.registerTask(<span class=\"string\">'default'</span>, [<span class=\"string\">'jshint'</span>, <span class=\"string\">'qunit'</span>, <span class=\"string\">'concat'</span>, <span class=\"string\">'uglify'</span>]);</div><div class=\"line\"></div><div class=\"line\">};</div></pre></td></tr></table></figure>\n\n","source":"_posts/sample file for grunt.md","raw":"---\ntitle: \"Sample file for grunt\"\ncategories: nodejs\n---\n\n# Sample file for grunt\n``` javascript\nmodule.exports = function(grunt) {\n\n  grunt.initConfig({\n    pkg: grunt.file.readJSON('package.json'),\n    concat: {\n      options: {\n        separator: ';'\n      },\n      dist: {\n        src: ['src/**/*.js'],\n        dest: 'dist/<%= pkg.name %>.js'\n      }\n    },\n    uglify: {\n      options: {\n        banner: '/*! <%= pkg.name %> <%= grunt.template.today(\"dd-mm-yyyy\") %> */\\n'\n      },\n      dist: {\n        files: {\n          'dist/<%= pkg.name %>.min.js': ['<%= concat.dist.dest %>']\n        }\n      }\n    },\n    qunit: {\n      files: ['test/**/*.html']\n    },\n    jshint: {\n      files: ['Gruntfile.js', 'src/**/*.js', 'test/**/*.js'],\n      options: {\n        //这里是覆盖JSHint默认配置的选项\n        globals: {\n          jQuery: true,\n          console: true,\n          module: true,\n          document: true\n        }\n      }\n    },\n    watch: {\n      files: ['<%= jshint.files %>'],\n      tasks: ['jshint', 'qunit']\n    }\n  });\n\n  grunt.loadNpmTasks('grunt-contrib-uglify');\n  grunt.loadNpmTasks('grunt-contrib-jshint');\n  grunt.loadNpmTasks('grunt-contrib-qunit');\n  grunt.loadNpmTasks('grunt-contrib-watch');\n  grunt.loadNpmTasks('grunt-contrib-concat');\n\n  grunt.registerTask('test', ['jshint', 'qunit']);\n\n  grunt.registerTask('default', ['jshint', 'qunit', 'concat', 'uglify']);\n\n};\n```","slug":"sample file for grunt","date":1406829170000,"updated":1406829170000,"excerpt":"","_id":"tvnr2k7316gf5yfv","tags":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"Sample json file for npm","categories":["ly7spr8a7qp5r3ys"],"content":"<h1 id=\"A_sample_json_file_for_npm\">A sample json file for npm</h1>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\">{</div><div class=\"line\">\"name\": \"mypackage\",</div><div class=\"line\">\"description\": \"Sample package for CommonJS. This package demonstrates the required</div><div class=\"line\">elements of a CommonJS package.\",</div><div class=\"line\">\"version\": \"0.7.0\",</div><div class=\"line\">\"keywords\": [</div><div class=\"line\">\"package\",</div><div class=\"line\">\"example\"</div><div class=\"line\">],</div><div class=\"line\">\"maintainers\": [</div><div class=\"line\">{</div><div class=\"line\">\"name\": \"Bill Smith\",</div><div class=\"line\">\"email\": \"bills@example.com\",</div><div class=\"line\">}</div><div class=\"line\">],</div><div class=\"line\">\"contributors\": [</div><div class=\"line\">{</div><div class=\"line\">\"name\": \"BYVoid\",</div><div class=\"line\">\"web\": \"http://www.byvoid.com/\"</div><div class=\"line\">}</div><div class=\"line\">],</div><div class=\"line\">\"bugs\": {</div><div class=\"line\">\"mail\": \"dev@example.com\",</div><div class=\"line\">\"web\": \"http://www.example.com/bugs\"</div><div class=\"line\">},</div><div class=\"line\">\"licenses\": [</div><div class=\"line\">{</div><div class=\"line\">\"type\": \"GPLv2\",</div><div class=\"line\">\"url\": \"http://www.example.org/licenses/gpl.html\"</div><div class=\"line\">}</div><div class=\"line\">],</div><div class=\"line\">\"repositories\": [</div><div class=\"line\">{</div><div class=\"line\">\"type\": \"git\",</div><div class=\"line\">\"url\": \"http://github.com/BYVoid/mypackage.git\"</div><div class=\"line\">}</div><div class=\"line\">],</div><div class=\"line\">\"dependencies\": {</div><div class=\"line\">\"webkit\": \"1.2\",</div><div class=\"line\">\"ssl\": {</div><div class=\"line\">\"gnutls\": [\"1.0\", \"2.0\"],</div><div class=\"line\">\"openssl\": \"0.9.8\"</div><div class=\"line\">}</div><div class=\"line\">}</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n","source":"_posts/sample file for npm.md","raw":"---\ntitle: \"Sample json file for npm\"\ncategories: nodejs\n---\n\n# A sample json file for npm\n``` json\n{\n\"name\": \"mypackage\",\n\"description\": \"Sample package for CommonJS. This package demonstrates the required\nelements of a CommonJS package.\",\n\"version\": \"0.7.0\",\n\"keywords\": [\n\"package\",\n\"example\"\n],\n\"maintainers\": [\n{\n\"name\": \"Bill Smith\",\n\"email\": \"bills@example.com\",\n}\n],\n\"contributors\": [\n{\n\"name\": \"BYVoid\",\n\"web\": \"http://www.byvoid.com/\"\n}\n],\n\"bugs\": {\n\"mail\": \"dev@example.com\",\n\"web\": \"http://www.example.com/bugs\"\n},\n\"licenses\": [\n{\n\"type\": \"GPLv2\",\n\"url\": \"http://www.example.org/licenses/gpl.html\"\n}\n],\n\"repositories\": [\n{\n\"type\": \"git\",\n\"url\": \"http://github.com/BYVoid/mypackage.git\"\n}\n],\n\"dependencies\": {\n\"webkit\": \"1.2\",\n\"ssl\": {\n\"gnutls\": [\"1.0\", \"2.0\"],\n\"openssl\": \"0.9.8\"\n}\n}\n}\n```","slug":"sample file for npm","date":1406829326000,"updated":1406829326000,"excerpt":"","_id":"ghjp5eeitf8uxsz8","tags":[],"comments":true,"layout":"post","photos":[],"link":""},{"layout":"post","title":"Using nodejs to develop desktop app","date":1405434660000,"categories":["ly7spr8a7qp5r3ys"],"img_src":"/img/nodejs.jpg","description":"Using nodejs to develop desktop app","content":"<h1 id=\"目录\">目录</h1>\n<h3 id=\"一、node-webkit是什么？\">一、node-webkit是什么？</h3>\n<h3 id=\"二、node-webkit有些什么干货？\">二、node-webkit有些什么干货？</h3>\n<h3 id=\"三、node-webkit的基本工作原理是怎样的？\">三、node-webkit的基本工作原理是怎样的？</h3>\n<h3 id=\"四、怎样用node-webkit进行客户端开发？\">四、怎样用node-webkit进行客户端开发？</h3>\n<h3 id=\"五、如何做到开发一份代码，生成多平台APP？\">五、如何做到开发一份代码，生成多平台APP？</h3>\n<h3 id=\"六、使用node-webkit开发桌面客户端的优缺点？\">六、使用node-webkit开发桌面客户端的优缺点？</h3>\n<h3 id=\"七、Q_&amp;_A!\">七、Q &amp; A!</h3>\n<h3 id=\"一、node-webkit是什么？-1\">一、node-webkit是什么？</h3>\n<h4 id=\"1、概念\">1、概念</h4>\n<p>基于node.js和chromium的应用程序实时运行环境，可运行通过HTML(5)、CSS(3)、Javascript来编写的本地应用程序。node.js和webkit的结合体，webkit提供DOM操作，node.js提供本地化操作；且将二者的context完全整合，可在HTML代码中直接使用node.js的API。</p>\n<h4 id=\"2、获取node-webkit\">2、获取node-webkit</h4>\n<p>官网：<a href=\"https://github.com/rogerwang/node-webkit\" target=\"_blank\" rel=\"external\">https://github.com/rogerwang/node-webkit</a></p>\n<p>支持的平台：Windows 32bit，Linux 32/64bit，Mac 32bit(OS X 10.7+)</p>\n<p>选择与平台相对应的版本，下载并安装即可。</p>\n<h3 id=\"二、node-webkit有些什么干货？-1\">二、node-webkit有些什么干货？</h3>\n<p>官方提供的一些成品：<a href=\"https://github.com/rogerwang/node-webkit/wiki/List-of-apps-and-companies-using-node-webkit\" target=\"_blank\" rel=\"external\">https://github.com/rogerwang/node-webkit/wiki/List-of-apps-and-companies-using-node-webkit</a></p>\n<h3 id=\"三、node-webkit的基本工作原理是怎样的？-1\">三、node-webkit的基本工作原理是怎样的？</h3>\n<p>webkit提供DOM操作，包括HTML解析、CSS渲染、Javascript解释执行、DOM事件处理等。而node.js则提供一些本地化的操作、服务器端的处理等。二者的上下文完全融合，实现一个较为完美的本地应用环境。</p>\n<h3 id=\"四、怎样用node-webkit进行客户端开发？-1\">四、怎样用node-webkit进行客户端开发？</h3>\n<h4 id=\"1、一个node-webkit项目的基本目录结构\">1、一个node-webkit项目的基本目录结构</h4>\n<p>上面这是一个简单nw应用的目录结构，如果nw应用中需要用到额外的node_module，可以在目录结构中增加一个node_modules的目录，以存放APP所需的node插件。</p>\n<p>其实，一个最最简单的nw应用，只需要有mail.html和package.json文件即可，如下：</p>\n<h4 id=\"2、认识package-json\">2、认识package.json</h4>\n<p>“Every app package should contain a manifest file named package.json, it will tell node-webkit how to open the app and control how the browser behaves. ”</p>\n<p>package.json格式如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">{</div><div class=\"line\">    \"main\": \"main.html\",                              /* APP的主入口，文件名任意；必选 */</div><div class=\"line\">    \"name\": \"nw-demo\",                                /* APP的名称，必须具备唯一性，且符合正常变量命名；必选 */</div><div class=\"line\">    \"description\": \"demo app of node-webkit\",         /* APP的简单描述 */</div><div class=\"line\">    \"version\": \"0.1.0\",                               /* APP的版本号 */</div><div class=\"line\">    \"keywords\": [ \"demo\", \"node-webkit\" ],            /* APP的关键字，搜索APP时用到 */</div><div class=\"line\">    \"window\": {                                       /* APP的窗口属性 */</div><div class=\"line\">        \"icon\": \"link.png\",                           /* APP图标（windows下，状态栏上可见） */</div><div class=\"line\">        \"toolbar\": true,                              /* 是否显示工具栏 */</div><div class=\"line\">        \"width\": 800,                                 /* 窗口初始化大小 */</div><div class=\"line\">        \"height\": 500,</div><div class=\"line\">        \"frame\": true                                 /* 是否显示外窗体，如最大化、最小化、关闭按钮 */</div><div class=\"line\">    },</div><div class=\"line\">    \"user-agent\": \"%name %ver %nwver %webkit_ver %osinfo\" /* 可自定义APP的UA */</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n\n\n\n<p>其中，main和name是必选字段，更多配置字段，可参考官方地址：<a href=\"https://github.com/rogerwang/node-webkit/wiki/Manifest-Format\" target=\"_blank\" rel=\"external\">https://github.com/rogerwang/node-webkit/wiki/Manifest-Format</a></p>\n<h4 id=\"3、主窗口mail-html的写法\">3、主窗口mail.html的写法</h4>\n<p>随意写，和普通的前端页面开发方式一样！</p>\n<h4 id=\"4、最简单的HelloWorld\">4、最简单的HelloWorld</h4>\n<p>Create <code>index.html</code>:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"doctype\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">html</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"title\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"title\">title</span>&gt;</span>Hello World!<span class=\"tag\">&lt;/<span class=\"title\">title</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"title\">head</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"title\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"title\">h1</span>&gt;</span>Hello World!<span class=\"tag\">&lt;/<span class=\"title\">h1</span>&gt;</span></div><div class=\"line\">    We are using node.js <span class=\"tag\">&lt;<span class=\"title\">script</span>&gt;</span><span class=\"javascript\"><span class=\"built_in\">document</span>.write(process.version)</span><span class=\"tag\">&lt;/<span class=\"title\">script</span>&gt;</span>.</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"title\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"title\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n\n<p>Create <code>package.json</code>:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">{</div><div class=\"line\">  \"<span class=\"attribute\">name</span>\": <span class=\"value\"><span class=\"string\">\"nw-demo\"</span></span>,</div><div class=\"line\">  \"<span class=\"attribute\">main</span>\": <span class=\"value\"><span class=\"string\">\"index.html\"</span></span></div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>Compress <code>index.html</code> and <code>package.json</code> into a zip archive called <code>app.nw</code>:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ zip app.nw index.html package.json</div></pre></td></tr></table></figure>\n\n<p>This should create a structure like this:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">app</span><span class=\"string\">.</span><span class=\"comment\">nw</span></div><div class=\"line\"><span class=\"comment\">|</span><span class=\"literal\">-</span><span class=\"literal\">-</span> <span class=\"comment\">package</span><span class=\"string\">.</span><span class=\"comment\">json</span></div><div class=\"line\"><span class=\"comment\">`</span><span class=\"literal\">-</span><span class=\"literal\">-</span> <span class=\"comment\">index</span><span class=\"string\">.</span><span class=\"comment\">html</span></div></pre></td></tr></table></figure>\n\n<p>Download the prebuilt binary for your platform and use it to open the<br><code>app.nw</code> file:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ./nw app.nw</div></pre></td></tr></table></figure>\n\n<p>也许你会觉得这个界面特别熟悉，没错，它就是chromium！只是在node-webkit中，我们可以通过修改package.json配置，把工具栏和外框去掉，修改后的配置为：</p>\n<p>去掉外框后的运行效果：</p>\n<p>你一定会发现去掉toolbar和frame以后，窗口没法被拖动了，其实，可以通过下面这句css来实现窗口可拖动：</p>\n<h3 id=\"五、如何做到开发一份代码，生成多平台APP？-1\">五、如何做到开发一份代码，生成多平台APP？</h3>\n<h4 id=\"1、nw包制作\">1、nw包制作</h4>\n<p>完成上面的操作，已经生成了一个名为hello-world.nw的文件，如果本机已经安装过node-webkit，双击该文件即可运行。但是，针对未安装过node-webkit的用户，还需要将此nw的运行环境也打包在一起，并生成通用可执行文件，Mac上<em>.app，Windows上</em>.exe。</p>\n<h4 id=\"2、针对Mac_OS_X，*-app文件制作\">2、针对Mac OS X，*.app文件制作</h4>\n<p>a）、app.icns文件制作</p>\n<p>为你的App制作特定图标，可准备一张1024*1024的png图片，利用icns-Tool工具生成app.icns图标文件。</p>\n<p>b）、修改Info.plist文件</p>\n<p>为你的App制作或修改特定的描述文件。</p>\n<p>c）、打包*.app</p>\n<p>从官网再次下载node-webkit的Mac版，命令行执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">mv hello-world.nw app.nw </div><div class=\"line\">cp app.nw node-webkit.app/Contents/Resources/</div><div class=\"line\">cp app.icns node-webkit.app/Contents/Resources/</div><div class=\"line\">cp Info.plist node-webkit.app/Contents/</div><div class=\"line\">mv node-webkit.app hello-wrold.app</div></pre></td></tr></table></figure>\n\n<p>至此，Mac OS X版本的可执行程序hello-world.app制作完成。</p>\n<p>一般情况下，都会将其压缩后再进行传播。</p>\n<h4 id=\"3）、针对Windows，*-exe文件制作\">3）、针对Windows，*.exe文件制作</h4>\n<p>windows版本的exe程序制作非常容易，从官网下载node-webkit.exe，cmd下执行：</p>\n<figure class=\"highlight bat\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">copy</span> /b node-webkit.exe+app.exe hello-world.exe</div></pre></td></tr></table></figure>\n\n<p>在Linux环境下，可以使用如下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">cat node-webkit.exe app.exe &gt; hello-world.exe</div></pre></td></tr></table></figure>\n\n<p>至此，Windows版本的hello-world.exe程序制作完成。</p>\n<p>4）、将繁琐重复的操作整合到一个build.sh脚本中</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"shebang\">#! sh</span></div><div class=\"line\">app_name=<span class=\"string\">\"system-info\"</span></div><div class=\"line\"><span class=\"comment\"># 创建app.nw文件</span></div><div class=\"line\"><span class=\"built_in\">cd</span> ../ && rm -rf output && mkdir output cp</div><div class=\"line\">rm -rf output</div><div class=\"line\">-r <span class=\"variable\">$app_name</span>/* output</div><div class=\"line\">rm -rf output/Info.plist output/build.sh output/app.icns</div><div class=\"line\"><span class=\"built_in\">cd</span> output/</div><div class=\"line\">find . -type d -name <span class=\"string\">\".svn\"</span> | xargs rm -rf</div><div class=\"line\">zip -r ../app.nw * &gt; /dev/null;</div><div class=\"line\">rm -rf * && <span class=\"built_in\">cd</span> ../ && mv app.nw output/</div><div class=\"line\">mv output <span class=\"variable\">$app_name</span>/ && <span class=\"built_in\">cd</span> <span class=\"variable\">$app_name</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"create nw file success!\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#下载基础包</span></div><div class=\"line\">svn co svn://localhost/node-webkit-base output &gt; /dev/null</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#创建mac版本app</span></div><div class=\"line\"><span class=\"built_in\">cd</span> output</div><div class=\"line\">unzip mac-os-x.zip <span class=\"operator\">-d</span> mac-os-x &gt; /dev/null</div><div class=\"line\">rm -rf mac-os-x.zip mac-os-x/nwsnapshot</div><div class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"operator\">-f</span> ../Info.plist ];<span class=\"keyword\">then</span></div><div class=\"line\">cp ../Info.plist mac-os-x/node-webkit.app/Contents/</div><div class=\"line\"><span class=\"keyword\">fi</span></div><div class=\"line\">cp app.nw mac-os-x/node-webkit.app/Contents/Resources/</div><div class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"operator\">-f</span> ../app.icns ];<span class=\"keyword\">then</span></div><div class=\"line\">cp ../app.icns mac-os-x/node-webkit.app/Contents/Resources/</div><div class=\"line\"><span class=\"keyword\">fi</span></div><div class=\"line\">mv mac-os-x/node-webkit.app mac-os-x/<span class=\"variable\">$app_name</span>.app</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"create mac os app success!\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#创建windows版本app</span></div><div class=\"line\">unzip win-<span class=\"number\">32</span>.zip <span class=\"operator\">-d</span> win-<span class=\"number\">32</span> &gt; /dev/null</div><div class=\"line\">rm -rf win-<span class=\"number\">32</span>.zip win-<span class=\"number\">32</span>/nwsnapshot</div><div class=\"line\">cp app.nw win-<span class=\"number\">32</span>/ && <span class=\"built_in\">cd</span> win-<span class=\"number\">32</span></div><div class=\"line\">cat nw.exe app.nw &gt; <span class=\"variable\">$app_name</span>.exe</div><div class=\"line\">rm -rf nw.exe nwsnapshot.exe</div><div class=\"line\"><span class=\"built_in\">cd</span> ..</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"create windows app success!\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#删除app.nw</span></div><div class=\"line\">rm <span class=\"operator\">-f</span> app.nw</div></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"六、使用node-webkit开发桌面客户端的优缺点？-1\">六、使用node-webkit开发桌面客户端的优缺点？</h3>\n<p>1、优点</p>\n<ul>\n<li>提高UI开发效率，DOM中丰富的事件等可以涵盖绝大多数桌面开发中的情况</li>\n<li>HTML(5)与CSS(3)拥有丰富的展现效果，可以更容易地对界面进行改版、换肤</li>\n<li>容易实现跨平台:Mac OS X 、Windows、Linux</li>\n<li>使用Web开发人员工具可以使 UI 调试变得很轻松</li>\n<li>桌面程序UI与Web版UI可以共享代码</li>\n</ul>\n<p>2）、缺点</p>\n<ul>\n<li>浏览器原生API几乎仅仅局限在Web页面上</li>\n<li>若通过JavaScript引擎向Web前端暴露一些具有操作客户端权限的API，如何保证代码安全性</li>\n<li>必须携带浏览器内核运行库，无形增加程序体积，至少20MB以上（压缩后）</li>\n<li>能否满足各种复杂怪异的需求，比如异型窗口</li>\n</ul>\n","source":"_posts/using-nodejs-webkit.markdown","raw":"---\nlayout: post\ntitle: \"Using nodejs to develop desktop app\"\ndate: 2014-07-15 22:31:00\ncategories: nodejs\nimg_src: \"/img/nodejs.jpg\"\ndescription: \"Using nodejs to develop desktop app\"\n---\n\n# 目录 #\n\n### 一、node-webkit是什么？ ###\n\n### 二、node-webkit有些什么干货？ ###\n\n### 三、node-webkit的基本工作原理是怎样的？ ###\n\n### 四、怎样用node-webkit进行客户端开发？ ###\n\n### 五、如何做到开发一份代码，生成多平台APP？ ###\n\n### 六、使用node-webkit开发桌面客户端的优缺点？ ###\n\n### 七、Q & A! ###\n\n \n\n### 一、node-webkit是什么？ ###\n\n#### 1、概念 ####\n\n基于node.js和chromium的应用程序实时运行环境，可运行通过HTML(5)、CSS(3)、Javascript来编写的本地应用程序。node.js和webkit的结合体，webkit提供DOM操作，node.js提供本地化操作；且将二者的context完全整合，可在HTML代码中直接使用node.js的API。\n\n \n\n#### 2、获取node-webkit ####\n\n官网：[https://github.com/rogerwang/node-webkit](https://github.com/rogerwang/node-webkit)\n\n支持的平台：Windows 32bit，Linux 32/64bit，Mac 32bit(OS X 10.7+)\n\n选择与平台相对应的版本，下载并安装即可。\n\n \n\n### 二、node-webkit有些什么干货？ ###\n\n官方提供的一些成品：[https://github.com/rogerwang/node-webkit/wiki/List-of-apps-and-companies-using-node-webkit](https://github.com/rogerwang/node-webkit/wiki/List-of-apps-and-companies-using-node-webkit)\n\n \n\n### 三、node-webkit的基本工作原理是怎样的？ ###\n\nwebkit提供DOM操作，包括HTML解析、CSS渲染、Javascript解释执行、DOM事件处理等。而node.js则提供一些本地化的操作、服务器端的处理等。二者的上下文完全融合，实现一个较为完美的本地应用环境。\n\n \n\n### 四、怎样用node-webkit进行客户端开发？ ###\n\n#### 1、一个node-webkit项目的基本目录结构 ####\n\n上面这是一个简单nw应用的目录结构，如果nw应用中需要用到额外的node_module，可以在目录结构中增加一个node_modules的目录，以存放APP所需的node插件。\n\n其实，一个最最简单的nw应用，只需要有mail.html和package.json文件即可，如下：\n\n \n\n#### 2、认识package.json ####\n\n“Every app package should contain a manifest file named package.json, it will tell node-webkit how to open the app and control how the browser behaves. ”\n\npackage.json格式如下：\n``` json\n{\n    \"main\": \"main.html\",                              /* APP的主入口，文件名任意；必选 */\n    \"name\": \"nw-demo\",                                /* APP的名称，必须具备唯一性，且符合正常变量命名；必选 */\n    \"description\": \"demo app of node-webkit\",         /* APP的简单描述 */\n    \"version\": \"0.1.0\",                               /* APP的版本号 */\n    \"keywords\": [ \"demo\", \"node-webkit\" ],            /* APP的关键字，搜索APP时用到 */\n    \"window\": {                                       /* APP的窗口属性 */\n        \"icon\": \"link.png\",                           /* APP图标（windows下，状态栏上可见） */\n        \"toolbar\": true,                              /* 是否显示工具栏 */\n        \"width\": 800,                                 /* 窗口初始化大小 */\n        \"height\": 500,\n        \"frame\": true                                 /* 是否显示外窗体，如最大化、最小化、关闭按钮 */\n    },\n    \"user-agent\": \"%name %ver %nwver %webkit_ver %osinfo\" /* 可自定义APP的UA */\n}\n```\n \n\n\n其中，main和name是必选字段，更多配置字段，可参考官方地址：[https://github.com/rogerwang/node-webkit/wiki/Manifest-Format](https://github.com/rogerwang/node-webkit/wiki/Manifest-Format)\n\n#### 3、主窗口mail.html的写法 ####\n\n随意写，和普通的前端页面开发方式一样！\n\n#### 4、最简单的HelloWorld ####\n\n\nCreate `index.html`:\n\n``` html\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>Hello World!</title>\n  </head>\n  <body>\n    <h1>Hello World!</h1>\n    We are using node.js <script>document.write(process.version)</script>.\n  </body>\n</html>\n```\n\nCreate `package.json`:\n\n``` json\n{\n  \"name\": \"nw-demo\",\n  \"main\": \"index.html\"\n}\n```\n\nCompress `index.html` and `package.json` into a zip archive called `app.nw`:\n\n``` bash\n$ zip app.nw index.html package.json\n```\n\nThis should create a structure like this:\n\n```\napp.nw\n|-- package.json\n`-- index.html\n```\n\nDownload the prebuilt binary for your platform and use it to open the\n`app.nw` file:\n\n``` bash\n$ ./nw app.nw\n```\n\n也许你会觉得这个界面特别熟悉，没错，它就是chromium！只是在node-webkit中，我们可以通过修改package.json配置，把工具栏和外框去掉，修改后的配置为：\n\n去掉外框后的运行效果：\n\n你一定会发现去掉toolbar和frame以后，窗口没法被拖动了，其实，可以通过下面这句css来实现窗口可拖动：\n\n \n\n### 五、如何做到开发一份代码，生成多平台APP？ ###\n\n#### 1、nw包制作 ####\n\n完成上面的操作，已经生成了一个名为hello-world.nw的文件，如果本机已经安装过node-webkit，双击该文件即可运行。但是，针对未安装过node-webkit的用户，还需要将此nw的运行环境也打包在一起，并生成通用可执行文件，Mac上*.app，Windows上*.exe。\n\n \n\n#### 2、针对Mac OS X，*.app文件制作 ####\n\na）、app.icns文件制作\n\n为你的App制作特定图标，可准备一张1024*1024的png图片，利用icns-Tool工具生成app.icns图标文件。\n\nb）、修改Info.plist文件\n\n为你的App制作或修改特定的描述文件。\n\nc）、打包*.app\n\n从官网再次下载node-webkit的Mac版，命令行执行：\n``` bash\nmv hello-world.nw app.nw \ncp app.nw node-webkit.app/Contents/Resources/\ncp app.icns node-webkit.app/Contents/Resources/\ncp Info.plist node-webkit.app/Contents/\nmv node-webkit.app hello-wrold.app\n```\n至此，Mac OS X版本的可执行程序hello-world.app制作完成。\n\n一般情况下，都会将其压缩后再进行传播。\n\n#### 3）、针对Windows，*.exe文件制作 ####\n\nwindows版本的exe程序制作非常容易，从官网下载node-webkit.exe，cmd下执行：\n``` bat\n\ncopy /b node-webkit.exe+app.exe hello-world.exe\n```\n在Linux环境下，可以使用如下命令：\n``` bash\n\ncat node-webkit.exe app.exe > hello-world.exe\n```\n至此，Windows版本的hello-world.exe程序制作完成。\n\n \n\n4）、将繁琐重复的操作整合到一个build.sh脚本中\n``` bash\n#! sh\napp_name=\"system-info\"\n# 创建app.nw文件\ncd ../ && rm -rf output && mkdir output cp\nrm -rf output\n-r $app_name/* output\nrm -rf output/Info.plist output/build.sh output/app.icns\ncd output/\nfind . -type d -name \".svn\" | xargs rm -rf\nzip -r ../app.nw * > /dev/null;\nrm -rf * && cd ../ && mv app.nw output/\nmv output $app_name/ && cd $app_name\necho \"create nw file success!\"\n\n#下载基础包\nsvn co svn://localhost/node-webkit-base output > /dev/null\n\n#创建mac版本app\ncd output\nunzip mac-os-x.zip -d mac-os-x > /dev/null\nrm -rf mac-os-x.zip mac-os-x/nwsnapshot\nif [ -f ../Info.plist ];then\ncp ../Info.plist mac-os-x/node-webkit.app/Contents/\nfi\ncp app.nw mac-os-x/node-webkit.app/Contents/Resources/\nif [ -f ../app.icns ];then\ncp ../app.icns mac-os-x/node-webkit.app/Contents/Resources/\nfi\nmv mac-os-x/node-webkit.app mac-os-x/$app_name.app\necho \"create mac os app success!\"\n\n#创建windows版本app\nunzip win-32.zip -d win-32 > /dev/null\nrm -rf win-32.zip win-32/nwsnapshot\ncp app.nw win-32/ && cd win-32\ncat nw.exe app.nw > $app_name.exe\nrm -rf nw.exe nwsnapshot.exe\ncd ..\necho \"create windows app success!\"\n\n#删除app.nw\nrm -f app.nw\n```\n \n\n### 六、使用node-webkit开发桌面客户端的优缺点？ ###\n\n1、优点\n\n- 提高UI开发效率，DOM中丰富的事件等可以涵盖绝大多数桌面开发中的情况\n- HTML(5)与CSS(3)拥有丰富的展现效果，可以更容易地对界面进行改版、换肤\n- 容易实现跨平台:Mac OS X 、Windows、Linux\n- 使用Web开发人员工具可以使 UI 调试变得很轻松\n- 桌面程序UI与Web版UI可以共享代码\n\n2）、缺点\n\n- 浏览器原生API几乎仅仅局限在Web页面上\n- 若通过JavaScript引擎向Web前端暴露一些具有操作客户端权限的API，如何保证代码安全性\n- 必须携带浏览器内核运行库，无形增加程序体积，至少20MB以上（压缩后）\n- 能否满足各种复杂怪异的需求，比如异型窗口\n\n","slug":"using-nodejs-webkit","updated":1406823288000,"excerpt":"","_id":"amkx8en5rauszs4c","tags":[],"comments":true,"photos":[],"link":""},{"title":"我们为何渐渐放弃了自己的梦想","layout":"post","img_src":"/img/feeling.jpg","description":"人生感悟","content":"<p><em>梦想到底是什么？对我来说，我的梦想就是我最渴望达成的目标。比起其他目标来说，梦想是我最最想达成的目标，为了这个目标，我愿意做一切努力。但同时，很梦想一直仅仅是梦想而已，未能成为实现。所以现在的问题就是，你对自己的梦想有多渴望？你的梦想真的是你的梦想吗？如果梦想成真你会获得莫大的幸福，那为什么你会不要这样的幸福呢？</em></p>\n<h3 id=\"异想天开\">异想天开</h3>\n<p>　　小时候我们的梦想是五彩缤纷的，我要当消防员、NBA球员、电影明星……感觉一切皆有可能。那时我们想：“我们有可能实现这些梦想。”但随着年龄的增长，很多观念开始限制我们。这些条条框框让我们离我们的梦想越来越远。进入青春期后，你发现有的女孩更漂亮、苗条、聪明；有的同学更魁梧，投篮易如反掌；你想考入哈佛，你为此做好一切准备和努力，可总有人比你成绩更好。</p>\n<p>　　然后95%的人就认命了，不断告诉自己：“唉，太糟了”，“我没那能力”，“我没那条件”，“我可以做一切努力但有人比我做的更好”。</p>\n<p>　　原来可以站在上面仰望星空的房顶现在却成了我们偷懒、逃避的庇护所。不把所有的鸡蛋都放在一个篮子里按说是合理的，但当事情不像设想的进行的那么顺利时就认为这不是最好的选择也是很不对的。那么究竟是什么阻止了我们达成目标，让我们不能实现梦想？</p>\n<h3 id=\"做好计划\">做好计划</h3>\n<p>　　人们放弃梦想的一个重要原因就是没有做好计划。总是想让长远目标立马实现，却没有实现目标的具体计划。我们总是想要快速的成功，而忽略了成功是一个过程，需要时间。有梦想有野心是好的，但自己要分清楚哪些是现在可能实现的，哪些是要等到将来才可行。成功者知道要分期设置目标，一步步实现。这样你就会一步步接近自己的梦想，而且从一个个阶段性的胜利中尝到成功的滋味。这小小成功很重要，这让你对自己实现最终的梦想更有信心。</p>\n<h3 id=\"持之以恒\">持之以恒</h3>\n<p>　　另一个原因就是持之以恒了。当事情进展的不像计划的那样顺利时，放弃这个转做其他的好像更有吸引力。我们在想：“这个确实是我想要的，但这太难了，而且要花的时间太长了”或者是：“我好像实现不了目标了，我再努力再坚持有什么意义。”坚持下去的意义就在于——这样你的梦想还是活的，你还有可能收获最终的幸福！你还有机会过上自己想要的生活。问题是你有多想实现这个梦想。</p>\n<h3 id=\"抛开束缚\">抛开束缚</h3>\n<p>　　我们放弃梦想的另一个重要原因是我们加在自己身上的种种束缚。这些束缚总会跳出来，告诉我们不够好，我们搞不定，让我们很没有安全感，认为自己糟透了。在低谷时，我们总是缺乏自信，不能做到这样鼓励自己：我很棒，我一定能抵达终点。我们认识不到自己的能力，开始自我怀疑了。<br>　　除了自我束缚，也有来自外部的束缚。外部环境也会让你没有安全感。“你该现实点”，这可能是人们最常爱的建议，虽然这建议没有什么实际作用。什么样才算是现实点？如何衡量？你认为比尔·盖茨现实吗？奥普拉呢？甘地呢？关于“现实”这个问题，Will Smith（美国电影明星）说的很好：“‘现实’之路就是平庸之路。”你愿意一直平庸下去吗？因为没有全身心投入而平庸？在追逐梦想的过程中肯定会时不时的害怕、沮丧，但如果你想实现你的梦想，这些都是少不了的。</p>\n<h3 id=\"积极乐观\">积极乐观</h3>\n<p>　　如果你让加在自己身上的束缚那么重，那么最该责怪的人是你自己。你让这些束缚加在自己身上，而不是将它们击退。你有选择不让它们影响自己的权力，因为你的身心你做主。一旦你认识到成功就掌握在自己的手中，只要以更积极的方式思考，你就可以做到。想象一下你达成目标时的激动场面，想象一下你会多么幸福。这样设想一会儿，看看会给你带来什么影响。如果这样的愿景让你非常幸福，你该问问自己你还可以为之做出哪些改变。</p>\n<p>　　总之，你放弃自己梦想的代价就是你不能获得最大的幸福感，除非那已经不是你的梦想了。那些没能坚持下来的人在之后的人生中总会禁不住想：若果…就会…。如果你的梦想对你非常重要，那就全力以赴吧，即使失败了也没有什么可以后悔的，可以对自己说：我真的尽力了。抛开一切束缚，追逐最大的快乐吧。在你有限的人生中，不要再舍本逐末。</p>\n","source":"_posts/why-we-droped-our-dream.markdown","raw":"---\ntitle: 我们为何渐渐放弃了自己的梦想\nlayout: post\ncategory: feeling\nimg_src: \"/img/feeling.jpg\"\ndescription: \"人生感悟\"\n---\n*梦想到底是什么？对我来说，我的梦想就是我最渴望达成的目标。比起其他目标来说，梦想是我最最想达成的目标，为了这个目标，我愿意做一切努力。但同时，很梦想一直仅仅是梦想而已，未能成为实现。所以现在的问题就是，你对自己的梦想有多渴望？你的梦想真的是你的梦想吗？如果梦想成真你会获得莫大的幸福，那为什么你会不要这样的幸福呢？*\n###异想天开\n\n　　小时候我们的梦想是五彩缤纷的，我要当消防员、NBA球员、电影明星……感觉一切皆有可能。那时我们想：“我们有可能实现这些梦想。”但随着年龄的增长，很多观念开始限制我们。这些条条框框让我们离我们的梦想越来越远。进入青春期后，你发现有的女孩更漂亮、苗条、聪明；有的同学更魁梧，投篮易如反掌；你想考入哈佛，你为此做好一切准备和努力，可总有人比你成绩更好。\n\n　　然后95%的人就认命了，不断告诉自己：“唉，太糟了”，“我没那能力”，“我没那条件”，“我可以做一切努力但有人比我做的更好”。\n\n　　原来可以站在上面仰望星空的房顶现在却成了我们偷懒、逃避的庇护所。不把所有的鸡蛋都放在一个篮子里按说是合理的，但当事情不像设想的进行的那么顺利时就认为这不是最好的选择也是很不对的。那么究竟是什么阻止了我们达成目标，让我们不能实现梦想？\n\n###做好计划\n\n　　人们放弃梦想的一个重要原因就是没有做好计划。总是想让长远目标立马实现，却没有实现目标的具体计划。我们总是想要快速的成功，而忽略了成功是一个过程，需要时间。有梦想有野心是好的，但自己要分清楚哪些是现在可能实现的，哪些是要等到将来才可行。成功者知道要分期设置目标，一步步实现。这样你就会一步步接近自己的梦想，而且从一个个阶段性的胜利中尝到成功的滋味。这小小成功很重要，这让你对自己实现最终的梦想更有信心。\n\n###持之以恒\n\n　　另一个原因就是持之以恒了。当事情进展的不像计划的那样顺利时，放弃这个转做其他的好像更有吸引力。我们在想：“这个确实是我想要的，但这太难了，而且要花的时间太长了”或者是：“我好像实现不了目标了，我再努力再坚持有什么意义。”坚持下去的意义就在于——这样你的梦想还是活的，你还有可能收获最终的幸福！你还有机会过上自己想要的生活。问题是你有多想实现这个梦想。\n\n###抛开束缚\n\n　　我们放弃梦想的另一个重要原因是我们加在自己身上的种种束缚。这些束缚总会跳出来，告诉我们不够好，我们搞不定，让我们很没有安全感，认为自己糟透了。在低谷时，我们总是缺乏自信，不能做到这样鼓励自己：我很棒，我一定能抵达终点。我们认识不到自己的能力，开始自我怀疑了。\n　　除了自我束缚，也有来自外部的束缚。外部环境也会让你没有安全感。“你该现实点”，这可能是人们最常爱的建议，虽然这建议没有什么实际作用。什么样才算是现实点？如何衡量？你认为比尔·盖茨现实吗？奥普拉呢？甘地呢？关于“现实”这个问题，Will Smith（美国电影明星）说的很好：“‘现实’之路就是平庸之路。”你愿意一直平庸下去吗？因为没有全身心投入而平庸？在追逐梦想的过程中肯定会时不时的害怕、沮丧，但如果你想实现你的梦想，这些都是少不了的。\n\n###积极乐观\n\n　　如果你让加在自己身上的束缚那么重，那么最该责怪的人是你自己。你让这些束缚加在自己身上，而不是将它们击退。你有选择不让它们影响自己的权力，因为你的身心你做主。一旦你认识到成功就掌握在自己的手中，只要以更积极的方式思考，你就可以做到。想象一下你达成目标时的激动场面，想象一下你会多么幸福。这样设想一会儿，看看会给你带来什么影响。如果这样的愿景让你非常幸福，你该问问自己你还可以为之做出哪些改变。\n\n　　总之，你放弃自己梦想的代价就是你不能获得最大的幸福感，除非那已经不是你的梦想了。那些没能坚持下来的人在之后的人生中总会禁不住想：若果…就会…。如果你的梦想对你非常重要，那就全力以赴吧，即使失败了也没有什么可以后悔的，可以对自己说：我真的尽力了。抛开一切束缚，追逐最大的快乐吧。在你有限的人生中，不要再舍本逐末。","slug":"why-we-droped-our-dream","date":1406823288000,"updated":1406823288000,"categories":["3n43sr26nb5rkg3y"],"excerpt":"","_id":"15uyt8kztufr4x8r","tags":[],"comments":true,"photos":[],"link":""},{"title":"网络入门","layout":"post","img_src":"/img/network.png","description":"网络入门","content":"<p>我们每天使用互联网，你是否想过，它是如何实现的？</p>\n<p>全世界几十亿台电脑，连接在一起，两两通信。上海的某一块网卡送出信号，洛杉矶的另一块网卡居然就收到了，两者实际上根本不知道对方的物理位置，你不觉得这是很神奇的事情吗？</p>\n<p>互联网的核心是一系列协议，总称为”互联网协议”（Internet Protocol Suite）。它们对电脑如何连接和组网，做出了详尽的规定。理解了这些协议，就理解了互联网的原理。</p>\n<p>下面就是我的学习笔记。因为这些协议实在太复杂、太庞大，我想整理一个简洁的框架，帮助自己从总体上把握它们。为了保证简单易懂，我做了大量的简化，有些地方并不全面和精确，但是应该能够说清楚互联网的原理。</p>\n<h2 id=\"一、概述\">一、概述</h2>\n<h3 id=\"1-1_五层模型\">1.1 五层模型</h3>\n<p>互联网的实现，分成好几层。每一层都有自己的功能，就像建筑物一样，每一层都靠下一层支持。</p>\n<p>用户接触到的，只是最上面的一层，根本没有感觉到下面的层。要理解互联网，必须从最下层开始，自下而上理解每一层的功能。</p>\n<p>如何分层有不同的模型，有的模型分七层，有的分四层。我觉得，把互联网分成五层，比较容易解释。</p>\n<p><img src=\"http://image.beekka.com/blog/201205/bg2012052902.png\" alt=\"image\"></p>\n<p>如上图所示，最底下的一层叫做”实体层”（Physical Layer），最上面的一层叫做”应用层”（Application Layer），中间的三层（自下而上）分别是”链接层”（Link Layer）、”网络层”（Network Layer）和”传输层”（Transport Layer）。越下面的层，越靠近硬件；越上面的层，越靠近用户。<br>它们叫什么名字，其实并不重要。只需要知道，互联网分成若干层就可以了。</p>\n<h3 id=\"1-2_层与协议\">1.2 层与协议</h3>\n<p>每一层都是为了完成一种功能。为了实现这些功能，就需要大家都遵守共同的规则。</p>\n<p>大家都遵守的规则，就叫做”协议”（protocol）。</p>\n<p>互联网的每一层，都定义了很多协议。这些协议的总称，就叫做”互联网协议”（Internet Protocol Suite）。它们是互联网的核心，下面介绍每一层的功能，主要就是介绍每一层的主要协议。</p>\n<h2 id=\"二、实体层\">二、实体层</h2>\n<p>我们从最底下的一层开始。</p>\n<p>电脑要组网，第一件事要干什么？当然是先把电脑连起来，可以用光缆、电缆、双绞线、无线电波等方式。</p>\n<p><img src=\"http://image.beekka.com/blog/201205/bg2012052903.png\" alt=\"image\"></p>\n<p>这就叫做”实体层”，它就是把电脑连接起来的物理手段。它主要规定了网络的一些电气特性，作用是负责传送0和1<br>的电信号。</p>\n<h2 id=\"三、链接层\">三、链接层</h2>\n<h3 id=\"3-1_定义\">3.1 定义</h3>\n<p>单纯的0和1没有任何意义，必须规定解读方式：多少个电信号算一组？每个信号位有何意义？</p>\n<p>这就是”链接层”的功能，它在”实体层”的上方，确定了0和1的分组方式。</p>\n<h3 id=\"3-2_以太网协议\">3.2 以太网协议</h3>\n<p>早期的时候，每家公司都有自己的电信号分组方式。逐渐地，一种叫做”以太网”（Ethernet）的协议，占据了主导地位。</p>\n<p>以太网规定，一组电信号构成一个数据包，叫做”帧”（Frame）。每一帧分成两个部分：标头（Head）和数据（Data）。<br><img src=\"http://image.beekka.com/blog/201205/bg2012052904.png\" alt=\"image\"></p>\n<p>“标头”包含数据包的一些说明项，比如发送者、接受者、数据类型等等；”数据”则是数据包的具体内容。</p>\n<p>“标头”的长度，固定为18字节。”数据”的长度，最短为46字节，最长为1500字节。因此，整个”帧”最短为64字节，最长为1518字节。如果数据很长，就必须分割成多个帧进行发送。</p>\n<h3 id=\"3-3_MAC地址\">3.3 MAC地址</h3>\n<p>上面提到，以太网数据包的”标头”，包含了发送者和接受者的信息。那么，发送者和接受者是如何标识呢？<br>以太网规定，连入网络的所有设备，都必须具有”网卡”接口。数据包必须是从一块网卡，传送到另一块网卡。网卡的地址，就是数据包的发送地址和接收地址，这叫做MAC地址。</p>\n<p>每块网卡出厂的时候，都有一个全世界独一无二的MAC地址，长度是48个二进制位，通常用12个十六进制数表示。</p>\n<p><img src=\"http://image.beekka.com/blog/201205/bg2012052906.png\" alt=\"image\"></p>\n<p>前6个十六进制数是厂商编号，后6个是该厂商的网卡流水号。有了MAC地址，就可以定位网卡和数据包的路径了。</p>\n<h3 id=\"3-4_广播\">3.4 广播</h3>\n<p>定义地址只是第一步，后面还有更多的步骤。</p>\n<p>首先，一块网卡怎么会知道另一块网卡的MAC地址？</p>\n<p>回答是有一种ARP协议，可以解决这个问题。这个留到后面介绍，这里只需要知道，以太网数据包必须知道接收方的MAC地址，然后才能发送。</p>\n<p>其次，就算有了MAC地址，系统怎样才能把数据包准确送到接收方？</p>\n<p>回答是以太网采用了一种很”原始”的方式，它不是把数据包准确送到接收方，而是向本网络内所有计算机发送，让每台计算机自己判断，是否为接收方。</p>\n<p><img src=\"http://image.beekka.com/blog/201205/bg2012052907.png\" alt=\"image\"></p>\n<p>上图中，1号计算机向2号计算机发送一个数据包，同一个子网络的3号、4号、5号计算机都会收到这个包。它们读取这个包的”标头”，找到接收方的MAC地址，然后与自身的MAC地址相比较，如果两者相同，就接受这个包，做进一步处理，否则就丢弃这个包。这种发送方式就叫做”广播”（broadcasting）。</p>\n<p>有了数据包的定义、网卡的MAC地址、广播的发送方式，”链接层”就可以在多台计算机之间传送数据了。</p>\n<h2 id=\"四、网络层\">四、网络层</h2>\n<h3 id=\"4-1_网络层的由来\">4.1 网络层的由来</h3>\n<p>以太网协议，依靠MAC地址发送数据。理论上，单单依靠MAC地址，上海的网卡就可以找到洛杉矶的网卡了，技术上是可以实现的。</p>\n<p>但是，这样做有一个重大的缺点。以太网采用广播方式发送数据包，所有成员人手一”包”，不仅效率低，而且局限在发送者所在的子网络。也就是说，如果两台计算机不在同一个子网络，广播是传不过去的。这种设计是合理的，否则互联网上每一台计算机都会收到所有包，那会引起灾难。</p>\n<p>互联网是无数子网络共同组成的一个巨型网络，很像想象上海和洛杉矶的电脑会在同一个子网络，这几乎是不可能的。</p>\n<p><img src=\"http://image.beekka.com/blog/201205/bg2012052914.png\" alt=\"image\"></p>\n<p>因此，必须找到一种方法，能够区分哪些MAC地址属于同一个子网络，哪些不是。如果是同一个子网络，就采用广播方式发送，否则就采用”路由”方式发送。（”路由”的意思，就是指如何向不同的子网络分发数据包，这是一个很大的主题，本文不涉及。）遗憾的是，MAC地址本身无法做到这一点。它只与厂商有关，与所处网络无关。</p>\n<p>这就导致了”网络层”的诞生。它的作用是引进一套新的地址，使得我们能够区分不同的计算机是否属于同一个子网络。这套地址就叫做”网络地址”，简称”网址”。</p>\n<p>于是，”网络层”出现以后，每台计算机有了两种地址，一种是MAC地址，另一种是网络地址。两种地址之间没有任何联系，MAC地址是绑定在网卡上的，网络地址则是管理员分配的，它们只是随机组合在一起。</p>\n<p>网络地址帮助我们确定计算机所在的子网络，MAC地址则将数据包送到该子网络中的目标网卡。因此，从逻辑上可以推断，必定是先处理网络地址，然后再处理MAC地址。</p>\n<h3 id=\"4-2_IP协议\">4.2 IP协议</h3>\n<p>规定网络地址的协议，叫做IP协议。它所定义的地址，就被称为IP地址。</p>\n<p>目前，广泛采用的是IP协议第四版，简称IPv4。这个版本规定，网络地址由32个二进制位组成。</p>\n<p><img src=\"http://image.beekka.com/blog/201205/bg2012052908.png\" alt=\"image\"></p>\n<p>习惯上，我们用分成四段的十进制数表示IP地址，从0.0.0.0一直到255.255.255.255。</p>\n<p>互联网上的每一台计算机，都会分配到一个IP地址。这个地址分成两个部分，前一部分代表网络，后一部分代表主机。比如，IP地址172.16.254.1，这是一个32位的地址，假定它的网络部分是前24位（172.16.254），那么主机部分就是后8位（最后的那个1）。处于同一个子网络的电脑，它们IP地址的网络部分必定是相同的，也就是说172.16.254.2应该与172.16.254.1处在同一个子网络。</p>\n<p>但是，问题在于单单从IP地址，我们无法判断网络部分。还是以172.16.254.1为例，它的网络部分，到底是前24位，还是前16位，甚至前28位，从IP地址上是看不出来的。</p>\n<p>那么，怎样才能从IP地址，判断两台计算机是否属于同一个子网络呢？这就要用到另一个参数”子网掩码”（subnet mask）。</p>\n<p>所谓”子网掩码”，就是表示子网络特征的一个参数。它在形式上等同于IP地址，也是一个32位二进制数字，它的网络部分全部为1，主机部分全部为0。比如，IP地址172.16.254.1，如果已知网络部分是前24位，主机部分是后8位，那么子网络掩码就是11111111.11111111.11111111.00000000，写成十进制就255.255.255.0。</p>\n<p>知道”子网掩码”，我们就能判断，任意两个IP地址是否处在同一个子网络。方法是将两个IP地址与子网掩码分别进行AND运算（两个数位都为1，运算结果为1，否则为0），然后比较结果是否相同，如果是的话，就表明它们在同一个子网络中，否则就不是。</p>\n<p>比如，已知IP地址172.16.254.1和172.16.254.233的子网掩码都是255.255.255.0，请问它们是否在同一个子网络？两者与子网掩码分别进行AND运算，结果都是172.16.254.0，因此它们在同一个子网络。</p>\n<p>总结一下，IP协议的作用主要有两个，一个是为每一台计算机分配IP地址，另一个是确定哪些地址在同一个子网络。</p>\n<h3 id=\"4-3_IP数据包\">4.3 IP数据包</h3>\n<p>根据IP协议发送的数据，就叫做IP数据包。不难想象，其中必定包括IP地址信息。</p>\n<p>但是前面说过，以太网数据包只包含MAC地址，并没有IP地址的栏位。那么是否需要修改数据定义，再添加一个栏位呢？</p>\n<p>回答是不需要，我们可以把IP数据包直接放进以太网数据包的”数据”部分，因此完全不用修改以太网的规格。这就是互联网分层结构的好处：上层的变动完全不涉及下层的结构。</p>\n<p>具体来说，IP数据包也分为”标头”和”数据”两个部分。</p>\n<p><img src=\"http://image.beekka.com/blog/201205/bg2012052909.png\" alt=\"image\"></p>\n<p>“标头”部分主要包括版本、长度、IP地址等信息，”数据”部分则是IP数据包的具体内容。它放进以太网数据包后，以太网数据包就变成了下面这样。</p>\n<p><img src=\"http://image.beekka.com/blog/201205/bg2012052910.png\" alt=\"image\"></p>\n<p>IP数据包的”标头”部分的长度为20到60字节，整个数据包的总长度最大为65,535字节。因此，理论上，一个IP数据包的”数据”部分，最长为65,515字节。前面说过，以太网数据包的”数据”部分，最长只有1500字节。因此，如果IP数据包超过了1500字节，它就需要分割成几个以太网数据包，分开发送了。</p>\n<h3 id=\"4-4_ARP协议\">4.4 ARP协议</h3>\n<p>关于”网络层”，还有最后一点需要说明。</p>\n<p>因为IP数据包是放在以太网数据包里发送的，所以我们必须同时知道两个地址，一个是对方的MAC地址，另一个是对方的IP地址。通常情况下，对方的IP地址是已知的（后文会解释），但是我们不知道它的MAC地址。</p>\n<p>所以，我们需要一种机制，能够从IP地址得到MAC地址。</p>\n<p>这里又可以分成两种情况。第一种情况，如果两台主机不在同一个子网络，那么事实上没有办法得到对方的MAC地址，只能把数据包传送到两个子网络连接处的”网关”（gateway），让网关去处理。</p>\n<p>第二种情况，如果两台主机在同一个子网络，那么我们可以用ARP协议，得到对方的MAC地址。ARP协议也是发出一个数据包（包含在以太网数据包中），其中包含它所要查询主机的IP地址，在对方的MAC地址这一栏，填的是FF:FF:FF:FF:FF:FF，表示这是一个”广播”地址。它所在子网络的每一台主机，都会收到这个数据包，从中取出IP地址，与自身的IP地址进行比较。如果两者相同，都做出回复，向对方报告自己的MAC地址，否则就丢弃这个包。</p>\n<p>总之，有了ARP协议之后，我们就可以得到同一个子网络内的主机MAC地址，可以把数据包发送到任意一台主机之上了。</p>\n<h2 id=\"五、传输层\">五、传输层</h2>\n<h3 id=\"5-1_传输层的由来\">5.1 传输层的由来</h3>\n<p>有了MAC地址和IP地址，我们已经可以在互联网上任意两台主机上建立通信。</p>\n<p>接下来的问题是，同一台主机上有许多程序都需要用到网络，比如，你一边浏览网页，一边与朋友在线聊天。当一个数据包从互联网上发来的时候，你怎么知道，它是表示网页的内容，还是表示在线聊天的内容？</p>\n<p>也就是说，我们还需要一个参数，表示这个数据包到底供哪个程序（进程）使用。这个参数就叫做”端口”（port），它其实是每一个使用网卡的程序的编号。每个数据包都发到主机的特定端口，所以不同的程序就能取到自己所需要的数据。</p>\n<p>“端口”是0到65535之间的一个整数，正好16个二进制位。0到1023的端口被系统占用，用户只能选用大于1023的端口。不管是浏览网页还是在线聊天，应用程序会随机选用一个端口，然后与服务器的相应端口联系。</p>\n<p>“传输层”的功能，就是建立”端口到端口”的通信。相比之下，”网络层”的功能是建立”主机到主机”的通信。只要确定主机和端口，我们就能实现程序之间的交流。因此，Unix系统就把主机+端口，叫做”套接字”（socket）。有了它，就可以进行网络应用程序开发了。</p>\n<h3 id=\"5-2_UDP协议\">5.2 UDP协议</h3>\n<p>现在，我们必须在数据包中加入端口信息，这就需要新的协议。最简单的实现叫做UDP协议，它的格式几乎就是在数据前面，加上端口号。</p>\n<p>UDP数据包，也是由”标头”和”数据”两部分组成。</p>\n<p><img src=\"http://image.beekka.com/blog/201205/bg2012052911.png\" alt=\"image\"></p>\n<p>“标头”部分主要定义了发出端口和接收端口，”数据”部分就是具体的内容。然后，把整个UDP数据包放入IP数据包的”数据”部分，而前面说过，IP数据包又是放在以太网数据包之中的，所以整个以太网数据包现在变成了下面这样：</p>\n<p><img src=\"http://image.beekka.com/blog/201205/bg2012052912.png\" alt=\"image\"></p>\n<p>UDP数据包非常简单，”标头”部分一共只有8个字节，总长度不超过65,535字节，正好放进一个IP数据包。</p>\n<h3 id=\"5-3_TCP协议\">5.3 TCP协议</h3>\n<p>UDP协议的优点是比较简单，容易实现，但是缺点是可靠性较差，一旦数据包发出，无法知道对方是否收到。<br>为了解决这个问题，提高网络可靠性，TCP协议就诞生了。这个协议非常复杂，但可以近似认为，它就是有确认机制的UDP协议，每发出一个数据包都要求确认。如果有一个数据包遗失，就收不到确认，发出方就知道有必要重发这个数据包了。</p>\n<p>因此，TCP协议能够确保数据不会遗失。它的缺点是过程复杂、实现困难、消耗较多的资源。</p>\n<p>TCP数据包和UDP数据包一样，都是内嵌在IP数据包的”数据”部分。TCP数据包没有长度限制，理论上可以无限长，但是为了保证网络的效率，通常TCP数据包的长度不会超过IP数据包的长度，以确保单个TCP数据包不必再分割。</p>\n<h2 id=\"六、应用层\">六、应用层</h2>\n<p>应用程序收到”传输层”的数据，接下来就要进行解读。由于互联网是开放架构，数据来源五花八门，必须事先规定好格式，否则根本无法解读。</p>\n<p>“应用层”的作用，就是规定应用程序的数据格式。</p>\n<p>举例来说，TCP协议可以为各种各样的程序传递数据，比如Email、WWW、FTP等等。那么，必须有不同协议规定电子邮件、网页、FTP数据的格式，这些应用程序协议就构成了”应用层”。</p>\n<p>这是最高的一层，直接面对用户。它的数据就放在TCP数据包的”数据”部分。因此，现在的以太网的数据包就变成下面这样。</p>\n<p><img src=\"http://image.beekka.com/blog/201205/bg2012052913.png\" alt=\"image\"></p>\n<p>至此，整个互联网的五层结构，自下而上全部讲完了。这是从系统的角度，解释互联网是如何构成的。下一篇，我反过来，从用户的角度，自上而下看看这个结构是如何发挥作用，完成一次网络数据交换的。</p>\n<h2 id=\"七、一个小结\">七、一个小结</h2>\n<p>先对前面的内容，做一个小结。</p>\n<p>我们已经知道，网络通信就是交换数据包。电脑A向电脑B发送一个数据包，后者收到了，回复一个数据包，从而实现两台电脑之间的通信。数据包的结构，基本上是下面这样：</p>\n<p>发送这个包，需要知道两个地址：</p>\n<p>　　* 对方的MAC地址</p>\n<p>　　* 对方的IP地址</p>\n<p>有了这两个地址，数据包才能准确送到接收者手中。但是，前面说过，MAC地址有局限性，如果两台电脑不在同一个子网络，就无法知道对方的MAC地址，必须通过网关（gateway）转发。</p>\n<p>上图中，1号电脑要向4号电脑发送一个数据包。它先判断4号电脑是否在同一个子网络，结果发现不是（后文介绍判断方法），于是就把这个数据包发到网关A。网关A通过路由协议，发现4号电脑位于子网络B，又把数据包发给网关B，网关B再转发到4号电脑。</p>\n<p>1号电脑把数据包发到网关A，必须知道网关A的MAC地址。所以，数据包的目标地址，实际上分成两种情况：</p>\n<p>场景    数据包地址</p>\n<p>同一个子网络    对方的MAC地址，对方的IP地址</p>\n<p>非同一个子网络    网关的MAC地址，对方的IP地址</p>\n<p>发送数据包之前，电脑必须判断对方是否在同一个子网络，然后选择相应的MAC地址。接下来，我们就来看，实际使用中，这个过程是怎么完成的。</p>\n<h2 id=\"八、用户的上网设置\">八、用户的上网设置</h2>\n<h3 id=\"8-1_静态IP地址\">8.1 静态IP地址</h3>\n<p>你买了一台新电脑，插上网线，开机，这时电脑能够上网吗？</p>\n<p>通常你必须做一些设置。有时，管理员（或者ISP）会告诉你下面四个参数，你把它们填入操作系统，计算机就能连上网了：</p>\n<p>　　* 本机的IP地址</p>\n<p>　　* 子网掩码</p>\n<p>　　* 网关的IP地址</p>\n<p>　　* DNS的IP地址</p>\n<p>下图是Windows系统的设置窗口。</p>\n<p>这四个参数缺一不可，后文会解释为什么需要知道它们才能上网。由于它们是给定的，计算机每次开机，都会分到同样的IP地址，所以这种情况被称作”静态IP地址上网”。</p>\n<p>但是，这样的设置很专业，普通用户望而生畏，而且如果一台电脑的IP地址保持不变，其他电脑就不能使用这个地址，不够灵活。出于这两个原因，大多数用户使用”动态IP地址上网”。</p>\n<h3 id=\"8-2_动态IP地址\">8.2 动态IP地址</h3>\n<p>所谓”动态IP地址”，指计算机开机后，会自动分配到一个IP地址，不用人为设定。它使用的协议叫做DHCP协议。<br>这个协议规定，每一个子网络中，有一台计算机负责管理本网络的所有IP地址，它叫做”DHCP服务器”。新的计算机加入网络，必须向”DHCP服务器”发送一个”DHCP请求”数据包，申请IP地址和相关的网络参数。</p>\n<p>前面说过，如果两台计算机在同一个子网络，必须知道对方的MAC地址和IP地址，才能发送数据包。但是，新加入的计算机不知道这两个地址，怎么发送数据包呢？</p>\n<p>DHCP协议做了一些巧妙的规定。</p>\n<h3 id=\"8-3_DHCP协议\">8.3 DHCP协议</h3>\n<p>首先，它是一种应用层协议，建立在UDP协议之上，所以整个数据包是这样的：</p>\n<p>　　（1）最前面的”以太网标头”，设置发出方（本机）的MAC地址和接收方（DHCP服务器）的MAC地址。前者就是本机网卡的MAC地址，后者这时不知道，就填入一个广播地址：FF-FF-FF-FF-FF-FF。</p>\n<p>　　（2）后面的”IP标头”，设置发出方的IP地址和接收方的IP地址。这时，对于这两者，本机都不知道。于是，发出方的IP地址就设为0.0.0.0，接收方的IP地址设为255.255.255.255。</p>\n<p>　　（3）最后的”UDP标头”，设置发出方的端口和接收方的端口。这一部分是DHCP协议规定好的，发出方是68端口，接收方是67端口。</p>\n<p>这个数据包构造完成后，就可以发出了。以太网是广播发送，同一个子网络的每台计算机都收到了这个包。因为接收方的MAC地址是FF-FF-FF-FF-FF-FF，看不出是发给谁的，所以每台收到这个包的计算机，还必须分析这个包的IP地址，才能确定是不是发给自己的。当看到发出方IP地址是0.0.0.0，接收方是255.255.255.255，于是DHCP服务器知道”这个包是发给我的”，而其他计算机就可以丢弃这个包。</p>\n<p>接下来，DHCP服务器读出这个包的数据内容，分配好IP地址，发送回去一个”DHCP响应”数据包。这个响应包的结构也是类似的，以太网标头的MAC地址是双方的网卡地址，IP标头的IP地址是DHCP服务器的IP地址（发出方）和255.255.255.255（接收方），UDP标头的端口是67（发出方）和68（接收方），分配给请求端的IP地址和本网络的具体参数则包含在Data部分。</p>\n<p>新加入的计算机收到这个响应包，于是就知道了自己的IP地址、子网掩码、网关地址、DNS服务器等等参数。</p>\n<h3 id=\"8-4_上网设置：小结\">8.4 上网设置：小结</h3>\n<p>这个部分，需要记住的就是一点：不管是”静态IP地址”还是”动态IP地址”，电脑上网的首要步骤，是确定四个参数。这四个值很重要，值得重复一遍：</p>\n<p>　　* 本机的IP地址</p>\n<p>　　* 子网掩码</p>\n<p>　　* 网关的IP地址</p>\n<p>　　* DNS的IP地址</p>\n<p>有了这几个数值，电脑就可以上网”冲浪”了。接下来，我们来看一个实例，当用户访问网页的时候，互联网协议是怎么运作的。</p>\n<h2 id=\"九、一个实例：访问网页\">九、一个实例：访问网页</h2>\n<h3 id=\"9-1_本机参数\">9.1 本机参数</h3>\n<p>我们假定，经过上一节的步骤，用户设置好了自己的网络参数：</p>\n<p>　　* 本机的IP地址：192.168.1.100</p>\n<p>　　* 子网掩码：255.255.255.0</p>\n<p>　　* 网关的IP地址：192.168.1.1</p>\n<p>　　* DNS的IP地址：8.8.8.8</p>\n<p>然后他打开浏览器，想要访问Google，在地址栏输入了网址：www.google.com。</p>\n<p>这意味着，浏览器要向Google发送一个网页请求的数据包。</p>\n<h3 id=\"9-2_DNS协议\">9.2 DNS协议</h3>\n<p>我们知道，发送数据包，必须要知道对方的IP地址。但是，现在，我们只知道网址www.google.com，不知道它的IP地址。<br>DNS协议可以帮助我们，将这个网址转换成IP地址。已知DNS服务器为8.8.8.8，于是我们向这个地址发送一个DNS数据包（53端口）。</p>\n<p>然后，DNS服务器做出响应，告诉我们Google的IP地址是172.194.72.105。于是，我们知道了对方的IP地址。</p>\n<h3 id=\"9-3_子网掩码\">9.3 子网掩码</h3>\n<p>接下来，我们要判断，这个IP地址是不是在同一个子网络，这就要用到子网掩码。<br>已知子网掩码是255.255.255.0，本机用它对自己的IP地址192.168.1.100，做一个二进制的AND运算（两个数位都为1，结果为1，否则为0），计算结果为192.168.1.0；然后对Google的IP地址172.194.72.105也做一个AND运算，计算结果为172.194.72.0。这两个结果不相等，所以结论是，Google与本机不在同一个子网络。<br>因此，我们要向Google发送数据包，必须通过网关192.168.1.1转发，也就是说，接收方的MAC地址将是网关的MAC地址。</p>\n<h3 id=\"9-4_应用层协议\">9.4 应用层协议</h3>\n<p>浏览网页用的是HTTP协议，它的整个数据包构造是这样的：</p>\n<p>HTTP部分的内容，类似于下面这样：<br>GET / HTTP/1.1Host: www.google.com</p>\n<p>Connection: keep-alive</p>\n<p>User-Agent: Mozilla/5.0 (Windows NT 6.1) ……</p>\n<p>Accept: text/html,application/xhtml+xml,application/xml;q=0.9,<em>/</em>;q=0.8</p>\n<p>Accept-Encoding: gzip,deflate,sdch</p>\n<p>Accept-Language: zh-CN,zh;q=0.8</p>\n<p>Accept-Charset: GBK,utf-8;q=0.7,*;q=0.3</p>\n<p>Cookie: … …</p>\n<p>我们假定这个部分的长度为4960字节，它会被嵌在TCP数据包之中。</p>\n<h3 id=\"9-5_TCP协议\">9.5 TCP协议</h3>\n<p>TCP数据包需要设置端口，接收方（Google）的HTTP端口默认是80，发送方（本机）的端口是一个随机生成的1024-65535之间的整数，假定为51775。</p>\n<p>TCP数据包的标头长度为20字节，加上嵌入HTTP的数据包，总长度变为4980字节。</p>\n<h3 id=\"9-6_IP协议\">9.6 IP协议</h3>\n<p>然后，TCP数据包再嵌入IP数据包。IP数据包需要设置双方的IP地址，这是已知的，发送方是192.168.1.100（本机），接收方是172.194.72.105（Google）。</p>\n<p>IP数据包的标头长度为20字节，加上嵌入的TCP数据包，总长度变为5000字节。</p>\n<h3 id=\"9-7_以太网协议\">9.7 以太网协议</h3>\n<p>最后，IP数据包嵌入以太网数据包。以太网数据包需要设置双方的MAC地址，发送方为本机的网卡MAC地址，接收方为网关192.168.1.1的MAC地址（通过ARP协议得到）。</p>\n<p>以太网数据包的数据部分，最大长度为1500字节，而现在的IP数据包长度为5000字节。因此，IP数据包必须分割成四个包。因为每个包都有自己的IP标头（20字节），所以四个包的IP数据包的长度分别为1500、1500、1500、560。</p>\n<h3 id=\"9-8_服务器端响应\">9.8 服务器端响应</h3>\n<p>经过多个网关的转发，Google的服务器172.194.72.105，收到了这四个以太网数据包。</p>\n<p>根据IP标头的序号，Google将四个包拼起来，取出完整的TCP数据包，然后读出里面的”HTTP请求”，接着做出”HTTP响应”，再用TCP协议发回来。</p>\n<p>本机收到HTTP响应以后，就可以将网页显示出来，完成一次网络通信。</p>\n<p>这个例子就到此为止，虽然经过了简化，但它大致上反映了互联网协议的整个通信过程。</p>\n","source":"_posts/basic-network.markdown","raw":"---\ntitle: 网络入门\nlayout: post\ncategory: network\nimg_src: \"/img/network.png\"\ndescription: \"网络入门\"\n---\n我们每天使用互联网，你是否想过，它是如何实现的？\n\n全世界几十亿台电脑，连接在一起，两两通信。上海的某一块网卡送出信号，洛杉矶的另一块网卡居然就收到了，两者实际上根本不知道对方的物理位置，你不觉得这是很神奇的事情吗？\n\n互联网的核心是一系列协议，总称为\"互联网协议\"（Internet Protocol Suite）。它们对电脑如何连接和组网，做出了详尽的规定。理解了这些协议，就理解了互联网的原理。\n\n下面就是我的学习笔记。因为这些协议实在太复杂、太庞大，我想整理一个简洁的框架，帮助自己从总体上把握它们。为了保证简单易懂，我做了大量的简化，有些地方并不全面和精确，但是应该能够说清楚互联网的原理。\n\n##一、概述\n###1.1 五层模型\n互联网的实现，分成好几层。每一层都有自己的功能，就像建筑物一样，每一层都靠下一层支持。\n\n用户接触到的，只是最上面的一层，根本没有感觉到下面的层。要理解互联网，必须从最下层开始，自下而上理解每一层的功能。\n\n如何分层有不同的模型，有的模型分七层，有的分四层。我觉得，把互联网分成五层，比较容易解释。\n\n![image](http://image.beekka.com/blog/201205/bg2012052902.png)\n\n如上图所示，最底下的一层叫做\"实体层\"（Physical Layer），最上面的一层叫做\"应用层\"（Application Layer），中间的三层（自下而上）分别是\"链接层\"（Link Layer）、\"网络层\"（Network Layer）和\"传输层\"（Transport Layer）。越下面的层，越靠近硬件；越上面的层，越靠近用户。\n它们叫什么名字，其实并不重要。只需要知道，互联网分成若干层就可以了。\n###1.2 层与协议\n\n每一层都是为了完成一种功能。为了实现这些功能，就需要大家都遵守共同的规则。\n\n大家都遵守的规则，就叫做\"协议\"（protocol）。\n\n互联网的每一层，都定义了很多协议。这些协议的总称，就叫做\"互联网协议\"（Internet Protocol Suite）。它们是互联网的核心，下面介绍每一层的功能，主要就是介绍每一层的主要协议。\n##二、实体层\n我们从最底下的一层开始。\n\n电脑要组网，第一件事要干什么？当然是先把电脑连起来，可以用光缆、电缆、双绞线、无线电波等方式。\n\n![image](http://image.beekka.com/blog/201205/bg2012052903.png)\n\n这就叫做\"实体层\"，它就是把电脑连接起来的物理手段。它主要规定了网络的一些电气特性，作用是负责传送0和1\n的电信号。\n##三、链接层\n###3.1 定义\n单纯的0和1没有任何意义，必须规定解读方式：多少个电信号算一组？每个信号位有何意义？\n\n这就是\"链接层\"的功能，它在\"实体层\"的上方，确定了0和1的分组方式。\n\n###3.2 以太网协议\n早期的时候，每家公司都有自己的电信号分组方式。逐渐地，一种叫做\"以太网\"（Ethernet）的协议，占据了主导地位。\n\n以太网规定，一组电信号构成一个数据包，叫做\"帧\"（Frame）。每一帧分成两个部分：标头（Head）和数据（Data）。\n![image](http://image.beekka.com/blog/201205/bg2012052904.png)\n\n\"标头\"包含数据包的一些说明项，比如发送者、接受者、数据类型等等；\"数据\"则是数据包的具体内容。\n\n\"标头\"的长度，固定为18字节。\"数据\"的长度，最短为46字节，最长为1500字节。因此，整个\"帧\"最短为64字节，最长为1518字节。如果数据很长，就必须分割成多个帧进行发送。\n\n###3.3 MAC地址\n上面提到，以太网数据包的\"标头\"，包含了发送者和接受者的信息。那么，发送者和接受者是如何标识呢？\n以太网规定，连入网络的所有设备，都必须具有\"网卡\"接口。数据包必须是从一块网卡，传送到另一块网卡。网卡的地址，就是数据包的发送地址和接收地址，这叫做MAC地址。\n\n每块网卡出厂的时候，都有一个全世界独一无二的MAC地址，长度是48个二进制位，通常用12个十六进制数表示。\n\n![image](http://image.beekka.com/blog/201205/bg2012052906.png)\n\n前6个十六进制数是厂商编号，后6个是该厂商的网卡流水号。有了MAC地址，就可以定位网卡和数据包的路径了。\n###3.4 广播\n定义地址只是第一步，后面还有更多的步骤。\n\n首先，一块网卡怎么会知道另一块网卡的MAC地址？\n\n回答是有一种ARP协议，可以解决这个问题。这个留到后面介绍，这里只需要知道，以太网数据包必须知道接收方的MAC地址，然后才能发送。\n\n其次，就算有了MAC地址，系统怎样才能把数据包准确送到接收方？\n\n回答是以太网采用了一种很\"原始\"的方式，它不是把数据包准确送到接收方，而是向本网络内所有计算机发送，让每台计算机自己判断，是否为接收方。\n\n![image](http://image.beekka.com/blog/201205/bg2012052907.png)\n\n上图中，1号计算机向2号计算机发送一个数据包，同一个子网络的3号、4号、5号计算机都会收到这个包。它们读取这个包的\"标头\"，找到接收方的MAC地址，然后与自身的MAC地址相比较，如果两者相同，就接受这个包，做进一步处理，否则就丢弃这个包。这种发送方式就叫做\"广播\"（broadcasting）。\n\n有了数据包的定义、网卡的MAC地址、广播的发送方式，\"链接层\"就可以在多台计算机之间传送数据了。\n##四、网络层\n###4.1 网络层的由来\n以太网协议，依靠MAC地址发送数据。理论上，单单依靠MAC地址，上海的网卡就可以找到洛杉矶的网卡了，技术上是可以实现的。\n\n但是，这样做有一个重大的缺点。以太网采用广播方式发送数据包，所有成员人手一\"包\"，不仅效率低，而且局限在发送者所在的子网络。也就是说，如果两台计算机不在同一个子网络，广播是传不过去的。这种设计是合理的，否则互联网上每一台计算机都会收到所有包，那会引起灾难。\n\n互联网是无数子网络共同组成的一个巨型网络，很像想象上海和洛杉矶的电脑会在同一个子网络，这几乎是不可能的。\n\n![image](http://image.beekka.com/blog/201205/bg2012052914.png)\n\n因此，必须找到一种方法，能够区分哪些MAC地址属于同一个子网络，哪些不是。如果是同一个子网络，就采用广播方式发送，否则就采用\"路由\"方式发送。（\"路由\"的意思，就是指如何向不同的子网络分发数据包，这是一个很大的主题，本文不涉及。）遗憾的是，MAC地址本身无法做到这一点。它只与厂商有关，与所处网络无关。\n\n这就导致了\"网络层\"的诞生。它的作用是引进一套新的地址，使得我们能够区分不同的计算机是否属于同一个子网络。这套地址就叫做\"网络地址\"，简称\"网址\"。\n\n于是，\"网络层\"出现以后，每台计算机有了两种地址，一种是MAC地址，另一种是网络地址。两种地址之间没有任何联系，MAC地址是绑定在网卡上的，网络地址则是管理员分配的，它们只是随机组合在一起。\n\n网络地址帮助我们确定计算机所在的子网络，MAC地址则将数据包送到该子网络中的目标网卡。因此，从逻辑上可以推断，必定是先处理网络地址，然后再处理MAC地址。\n###4.2 IP协议\n规定网络地址的协议，叫做IP协议。它所定义的地址，就被称为IP地址。\n\n目前，广泛采用的是IP协议第四版，简称IPv4。这个版本规定，网络地址由32个二进制位组成。\n\n![image](http://image.beekka.com/blog/201205/bg2012052908.png)\n\n习惯上，我们用分成四段的十进制数表示IP地址，从0.0.0.0一直到255.255.255.255。\n\n互联网上的每一台计算机，都会分配到一个IP地址。这个地址分成两个部分，前一部分代表网络，后一部分代表主机。比如，IP地址172.16.254.1，这是一个32位的地址，假定它的网络部分是前24位（172.16.254），那么主机部分就是后8位（最后的那个1）。处于同一个子网络的电脑，它们IP地址的网络部分必定是相同的，也就是说172.16.254.2应该与172.16.254.1处在同一个子网络。\n\n但是，问题在于单单从IP地址，我们无法判断网络部分。还是以172.16.254.1为例，它的网络部分，到底是前24位，还是前16位，甚至前28位，从IP地址上是看不出来的。\n\n那么，怎样才能从IP地址，判断两台计算机是否属于同一个子网络呢？这就要用到另一个参数\"子网掩码\"（subnet mask）。\n\n所谓\"子网掩码\"，就是表示子网络特征的一个参数。它在形式上等同于IP地址，也是一个32位二进制数字，它的网络部分全部为1，主机部分全部为0。比如，IP地址172.16.254.1，如果已知网络部分是前24位，主机部分是后8位，那么子网络掩码就是11111111.11111111.11111111.00000000，写成十进制就255.255.255.0。\n\n知道\"子网掩码\"，我们就能判断，任意两个IP地址是否处在同一个子网络。方法是将两个IP地址与子网掩码分别进行AND运算（两个数位都为1，运算结果为1，否则为0），然后比较结果是否相同，如果是的话，就表明它们在同一个子网络中，否则就不是。\n\n比如，已知IP地址172.16.254.1和172.16.254.233的子网掩码都是255.255.255.0，请问它们是否在同一个子网络？两者与子网掩码分别进行AND运算，结果都是172.16.254.0，因此它们在同一个子网络。\n\n总结一下，IP协议的作用主要有两个，一个是为每一台计算机分配IP地址，另一个是确定哪些地址在同一个子网络。\n###4.3 IP数据包\n根据IP协议发送的数据，就叫做IP数据包。不难想象，其中必定包括IP地址信息。\n\n但是前面说过，以太网数据包只包含MAC地址，并没有IP地址的栏位。那么是否需要修改数据定义，再添加一个栏位呢？\n\n回答是不需要，我们可以把IP数据包直接放进以太网数据包的\"数据\"部分，因此完全不用修改以太网的规格。这就是互联网分层结构的好处：上层的变动完全不涉及下层的结构。\n\n具体来说，IP数据包也分为\"标头\"和\"数据\"两个部分。\n\n![image](http://image.beekka.com/blog/201205/bg2012052909.png)\n\n\"标头\"部分主要包括版本、长度、IP地址等信息，\"数据\"部分则是IP数据包的具体内容。它放进以太网数据包后，以太网数据包就变成了下面这样。\n\n![image](http://image.beekka.com/blog/201205/bg2012052910.png)\n\nIP数据包的\"标头\"部分的长度为20到60字节，整个数据包的总长度最大为65,535字节。因此，理论上，一个IP数据包的\"数据\"部分，最长为65,515字节。前面说过，以太网数据包的\"数据\"部分，最长只有1500字节。因此，如果IP数据包超过了1500字节，它就需要分割成几个以太网数据包，分开发送了。\n###4.4 ARP协议\n关于\"网络层\"，还有最后一点需要说明。\n\n因为IP数据包是放在以太网数据包里发送的，所以我们必须同时知道两个地址，一个是对方的MAC地址，另一个是对方的IP地址。通常情况下，对方的IP地址是已知的（后文会解释），但是我们不知道它的MAC地址。\n\n所以，我们需要一种机制，能够从IP地址得到MAC地址。\n\n这里又可以分成两种情况。第一种情况，如果两台主机不在同一个子网络，那么事实上没有办法得到对方的MAC地址，只能把数据包传送到两个子网络连接处的\"网关\"（gateway），让网关去处理。\n\n第二种情况，如果两台主机在同一个子网络，那么我们可以用ARP协议，得到对方的MAC地址。ARP协议也是发出一个数据包（包含在以太网数据包中），其中包含它所要查询主机的IP地址，在对方的MAC地址这一栏，填的是FF:FF:FF:FF:FF:FF，表示这是一个\"广播\"地址。它所在子网络的每一台主机，都会收到这个数据包，从中取出IP地址，与自身的IP地址进行比较。如果两者相同，都做出回复，向对方报告自己的MAC地址，否则就丢弃这个包。\n\n总之，有了ARP协议之后，我们就可以得到同一个子网络内的主机MAC地址，可以把数据包发送到任意一台主机之上了。\n\n##五、传输层\n###5.1 传输层的由来\n有了MAC地址和IP地址，我们已经可以在互联网上任意两台主机上建立通信。\n\n接下来的问题是，同一台主机上有许多程序都需要用到网络，比如，你一边浏览网页，一边与朋友在线聊天。当一个数据包从互联网上发来的时候，你怎么知道，它是表示网页的内容，还是表示在线聊天的内容？\n\n也就是说，我们还需要一个参数，表示这个数据包到底供哪个程序（进程）使用。这个参数就叫做\"端口\"（port），它其实是每一个使用网卡的程序的编号。每个数据包都发到主机的特定端口，所以不同的程序就能取到自己所需要的数据。\n\n\"端口\"是0到65535之间的一个整数，正好16个二进制位。0到1023的端口被系统占用，用户只能选用大于1023的端口。不管是浏览网页还是在线聊天，应用程序会随机选用一个端口，然后与服务器的相应端口联系。\n\n\"传输层\"的功能，就是建立\"端口到端口\"的通信。相比之下，\"网络层\"的功能是建立\"主机到主机\"的通信。只要确定主机和端口，我们就能实现程序之间的交流。因此，Unix系统就把主机+端口，叫做\"套接字\"（socket）。有了它，就可以进行网络应用程序开发了。\n\n###5.2 UDP协议\n现在，我们必须在数据包中加入端口信息，这就需要新的协议。最简单的实现叫做UDP协议，它的格式几乎就是在数据前面，加上端口号。\n\nUDP数据包，也是由\"标头\"和\"数据\"两部分组成。\n\n![image](http://image.beekka.com/blog/201205/bg2012052911.png)\n\n\"标头\"部分主要定义了发出端口和接收端口，\"数据\"部分就是具体的内容。然后，把整个UDP数据包放入IP数据包的\"数据\"部分，而前面说过，IP数据包又是放在以太网数据包之中的，所以整个以太网数据包现在变成了下面这样：\n\n![image](http://image.beekka.com/blog/201205/bg2012052912.png)\n\nUDP数据包非常简单，\"标头\"部分一共只有8个字节，总长度不超过65,535字节，正好放进一个IP数据包。\n###5.3 TCP协议\nUDP协议的优点是比较简单，容易实现，但是缺点是可靠性较差，一旦数据包发出，无法知道对方是否收到。\n为了解决这个问题，提高网络可靠性，TCP协议就诞生了。这个协议非常复杂，但可以近似认为，它就是有确认机制的UDP协议，每发出一个数据包都要求确认。如果有一个数据包遗失，就收不到确认，发出方就知道有必要重发这个数据包了。\n\n因此，TCP协议能够确保数据不会遗失。它的缺点是过程复杂、实现困难、消耗较多的资源。\n\nTCP数据包和UDP数据包一样，都是内嵌在IP数据包的\"数据\"部分。TCP数据包没有长度限制，理论上可以无限长，但是为了保证网络的效率，通常TCP数据包的长度不会超过IP数据包的长度，以确保单个TCP数据包不必再分割。\n\n##六、应用层\n应用程序收到\"传输层\"的数据，接下来就要进行解读。由于互联网是开放架构，数据来源五花八门，必须事先规定好格式，否则根本无法解读。\n\n\"应用层\"的作用，就是规定应用程序的数据格式。\n\n举例来说，TCP协议可以为各种各样的程序传递数据，比如Email、WWW、FTP等等。那么，必须有不同协议规定电子邮件、网页、FTP数据的格式，这些应用程序协议就构成了\"应用层\"。\n\n这是最高的一层，直接面对用户。它的数据就放在TCP数据包的\"数据\"部分。因此，现在的以太网的数据包就变成下面这样。\n\n![image](http://image.beekka.com/blog/201205/bg2012052913.png)\n\n至此，整个互联网的五层结构，自下而上全部讲完了。这是从系统的角度，解释互联网是如何构成的。下一篇，我反过来，从用户的角度，自上而下看看这个结构是如何发挥作用，完成一次网络数据交换的。\n##七、一个小结\n先对前面的内容，做一个小结。\n\n我们已经知道，网络通信就是交换数据包。电脑A向电脑B发送一个数据包，后者收到了，回复一个数据包，从而实现两台电脑之间的通信。数据包的结构，基本上是下面这样：\n\n\n发送这个包，需要知道两个地址：\n\n　　* 对方的MAC地址\n\n　　* 对方的IP地址\n\n有了这两个地址，数据包才能准确送到接收者手中。但是，前面说过，MAC地址有局限性，如果两台电脑不在同一个子网络，就无法知道对方的MAC地址，必须通过网关（gateway）转发。\n\n\n上图中，1号电脑要向4号电脑发送一个数据包。它先判断4号电脑是否在同一个子网络，结果发现不是（后文介绍判断方法），于是就把这个数据包发到网关A。网关A通过路由协议，发现4号电脑位于子网络B，又把数据包发给网关B，网关B再转发到4号电脑。\n\n1号电脑把数据包发到网关A，必须知道网关A的MAC地址。所以，数据包的目标地址，实际上分成两种情况：\n\n场景\t数据包地址\n\n同一个子网络\t对方的MAC地址，对方的IP地址\n\n非同一个子网络\t网关的MAC地址，对方的IP地址\n\n发送数据包之前，电脑必须判断对方是否在同一个子网络，然后选择相应的MAC地址。接下来，我们就来看，实际使用中，这个过程是怎么完成的。\n\n##八、用户的上网设置\n###8.1 静态IP地址\n你买了一台新电脑，插上网线，开机，这时电脑能够上网吗？\n\n通常你必须做一些设置。有时，管理员（或者ISP）会告诉你下面四个参数，你把它们填入操作系统，计算机就能连上网了：\n\n　　* 本机的IP地址\n\n　　* 子网掩码\n\n　　* 网关的IP地址\n\n　　* DNS的IP地址\n\n下图是Windows系统的设置窗口。\n\n\n这四个参数缺一不可，后文会解释为什么需要知道它们才能上网。由于它们是给定的，计算机每次开机，都会分到同样的IP地址，所以这种情况被称作\"静态IP地址上网\"。\n\n但是，这样的设置很专业，普通用户望而生畏，而且如果一台电脑的IP地址保持不变，其他电脑就不能使用这个地址，不够灵活。出于这两个原因，大多数用户使用\"动态IP地址上网\"。\n\n###8.2 动态IP地址\n\n所谓\"动态IP地址\"，指计算机开机后，会自动分配到一个IP地址，不用人为设定。它使用的协议叫做DHCP协议。\n这个协议规定，每一个子网络中，有一台计算机负责管理本网络的所有IP地址，它叫做\"DHCP服务器\"。新的计算机加入网络，必须向\"DHCP服务器\"发送一个\"DHCP请求\"数据包，申请IP地址和相关的网络参数。\n\n前面说过，如果两台计算机在同一个子网络，必须知道对方的MAC地址和IP地址，才能发送数据包。但是，新加入的计算机不知道这两个地址，怎么发送数据包呢？\n\nDHCP协议做了一些巧妙的规定。\n\n###8.3 DHCP协议\n首先，它是一种应用层协议，建立在UDP协议之上，所以整个数据包是这样的：\n\n\n　　（1）最前面的\"以太网标头\"，设置发出方（本机）的MAC地址和接收方（DHCP服务器）的MAC地址。前者就是本机网卡的MAC地址，后者这时不知道，就填入一个广播地址：FF-FF-FF-FF-FF-FF。\n\n　　（2）后面的\"IP标头\"，设置发出方的IP地址和接收方的IP地址。这时，对于这两者，本机都不知道。于是，发出方的IP地址就设为0.0.0.0，接收方的IP地址设为255.255.255.255。\n\n　　（3）最后的\"UDP标头\"，设置发出方的端口和接收方的端口。这一部分是DHCP协议规定好的，发出方是68端口，接收方是67端口。\n\n这个数据包构造完成后，就可以发出了。以太网是广播发送，同一个子网络的每台计算机都收到了这个包。因为接收方的MAC地址是FF-FF-FF-FF-FF-FF，看不出是发给谁的，所以每台收到这个包的计算机，还必须分析这个包的IP地址，才能确定是不是发给自己的。当看到发出方IP地址是0.0.0.0，接收方是255.255.255.255，于是DHCP服务器知道\"这个包是发给我的\"，而其他计算机就可以丢弃这个包。\n\n接下来，DHCP服务器读出这个包的数据内容，分配好IP地址，发送回去一个\"DHCP响应\"数据包。这个响应包的结构也是类似的，以太网标头的MAC地址是双方的网卡地址，IP标头的IP地址是DHCP服务器的IP地址（发出方）和255.255.255.255（接收方），UDP标头的端口是67（发出方）和68（接收方），分配给请求端的IP地址和本网络的具体参数则包含在Data部分。\n\n新加入的计算机收到这个响应包，于是就知道了自己的IP地址、子网掩码、网关地址、DNS服务器等等参数。\n\n###8.4 上网设置：小结\n这个部分，需要记住的就是一点：不管是\"静态IP地址\"还是\"动态IP地址\"，电脑上网的首要步骤，是确定四个参数。这四个值很重要，值得重复一遍：\n\n　　* 本机的IP地址\n\n　　* 子网掩码\n\n　　* 网关的IP地址\n\n　　* DNS的IP地址\n\n有了这几个数值，电脑就可以上网\"冲浪\"了。接下来，我们来看一个实例，当用户访问网页的时候，互联网协议是怎么运作的。\n\n##九、一个实例：访问网页\n###9.1 本机参数\n我们假定，经过上一节的步骤，用户设置好了自己的网络参数：\n\n　　* 本机的IP地址：192.168.1.100\n\n　　* 子网掩码：255.255.255.0\n\n　　* 网关的IP地址：192.168.1.1\n\n　　* DNS的IP地址：8.8.8.8\n\n然后他打开浏览器，想要访问Google，在地址栏输入了网址：www.google.com。\n\n这意味着，浏览器要向Google发送一个网页请求的数据包。\n###9.2 DNS协议\n我们知道，发送数据包，必须要知道对方的IP地址。但是，现在，我们只知道网址www.google.com，不知道它的IP地址。\nDNS协议可以帮助我们，将这个网址转换成IP地址。已知DNS服务器为8.8.8.8，于是我们向这个地址发送一个DNS数据包（53端口）。\n\n然后，DNS服务器做出响应，告诉我们Google的IP地址是172.194.72.105。于是，我们知道了对方的IP地址。\n###9.3 子网掩码\n接下来，我们要判断，这个IP地址是不是在同一个子网络，这就要用到子网掩码。\n已知子网掩码是255.255.255.0，本机用它对自己的IP地址192.168.1.100，做一个二进制的AND运算（两个数位都为1，结果为1，否则为0），计算结果为192.168.1.0；然后对Google的IP地址172.194.72.105也做一个AND运算，计算结果为172.194.72.0。这两个结果不相等，所以结论是，Google与本机不在同一个子网络。\n因此，我们要向Google发送数据包，必须通过网关192.168.1.1转发，也就是说，接收方的MAC地址将是网关的MAC地址。\n###9.4 应用层协议\n浏览网页用的是HTTP协议，它的整个数据包构造是这样的：\n\nHTTP部分的内容，类似于下面这样：\nGET / HTTP/1.1Host: www.google.com\n\nConnection: keep-alive\n\nUser-Agent: Mozilla/5.0 (Windows NT 6.1) ......\n\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\n\nAccept-Encoding: gzip,deflate,sdch\n\nAccept-Language: zh-CN,zh;q=0.8\n\nAccept-Charset: GBK,utf-8;q=0.7,*;q=0.3\n\nCookie: ... ...\n\n我们假定这个部分的长度为4960字节，它会被嵌在TCP数据包之中。\n###9.5 TCP协议\nTCP数据包需要设置端口，接收方（Google）的HTTP端口默认是80，发送方（本机）的端口是一个随机生成的1024-65535之间的整数，假定为51775。\n\nTCP数据包的标头长度为20字节，加上嵌入HTTP的数据包，总长度变为4980字节。\n###9.6 IP协议\n然后，TCP数据包再嵌入IP数据包。IP数据包需要设置双方的IP地址，这是已知的，发送方是192.168.1.100（本机），接收方是172.194.72.105（Google）。\n\nIP数据包的标头长度为20字节，加上嵌入的TCP数据包，总长度变为5000字节。\n###9.7 以太网协议\n最后，IP数据包嵌入以太网数据包。以太网数据包需要设置双方的MAC地址，发送方为本机的网卡MAC地址，接收方为网关192.168.1.1的MAC地址（通过ARP协议得到）。\n\n以太网数据包的数据部分，最大长度为1500字节，而现在的IP数据包长度为5000字节。因此，IP数据包必须分割成四个包。因为每个包都有自己的IP标头（20字节），所以四个包的IP数据包的长度分别为1500、1500、1500、560。\n\n###9.8 服务器端响应\n经过多个网关的转发，Google的服务器172.194.72.105，收到了这四个以太网数据包。\n\n根据IP标头的序号，Google将四个包拼起来，取出完整的TCP数据包，然后读出里面的\"HTTP请求\"，接着做出\"HTTP响应\"，再用TCP协议发回来。\n\n本机收到HTTP响应以后，就可以将网页显示出来，完成一次网络通信。\n\n这个例子就到此为止，虽然经过了简化，但它大致上反映了互联网协议的整个通信过程。","slug":"basic-network","date":1406823288000,"updated":1406823288000,"categories":["d4vqbigdptmbnv6l"],"excerpt":"","_id":"v44hfqle48lm6gh8","tags":[],"comments":true,"photos":[],"link":""},{"layout":"post","title":"Basic commands of Tcl","date":1405348260000,"categories":["wskeunpczarf4iei"],"img_src":"/img/tcl.jpg","description":"Help you learning tcl quickly.","content":"<h2 id=\"Tcl_学习之路\">Tcl 学习之路</h2>\n<h3 id=\"变量\">变量</h3>\n<ul>\n<li>tcl变量在初始化的时候无类型</li>\n<li>使用set xxx = xxxx进行初始化</li>\n<li>使用set xxx可以查看xxx的值</li>\n<li>使用unset将变量release掉</li>\n<li>预定义的变量包括env（系统变量）argv（脚本执行的参数）argc（脚本参数的个数）argv0执行脚本的程序名</li>\n</ul>\n<h3 id=\"【】的使用\">【】的使用</h3>\n<ul>\n<li>【】用于将内部命令结果的返回值作为另外一个命令的参数</li>\n<li>比如 set var2 【set var】就把var的只传给了var2</li>\n</ul>\n<h3 id=\"“”的使用\">“”的使用</h3>\n<ul>\n<li>用于把一段内容封装成string类型</li>\n<li>比如 set var “multiple word”</li>\n<li>可以在“”中加入【】之类进行替换</li>\n<li>比如 set b “a is [set a]” 会打印a is 2</li>\n<li>特殊字符如\\n等同样有效</li>\n</ul>\n<h3 id=\"{}的使用\">{}的使用</h3>\n<ul>\n<li>如果内容内部不需要对特殊字符进行处理，那么可以使用{}</li>\n<li>如set a {123\\n},则不会对\\n进行处理</li>\n</ul>\n<h3 id=\"数组\">数组</h3>\n<p>set earnings(January) 87966<br>注意tcl中的array是基于map形式的，没有固定的元素顺序，需要顺序的话可以使用列表，这里的数组有点像java中的set，索引始终是字符串类型的，即使你使用1作为索引，他依然是将1转换成字符串</p>\n<h3 id=\"多维数组\">多维数组</h3>\n<ul>\n<li>可以通过多个索引实现多维数组</li>\n<li>例如set matrix（1,1）140</li>\n</ul>\n<h3 id=\"查询数组元素\">查询数组元素</h3>\n<figure class=\"highlight tcl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">set</span> currency(Frence) euro</div><div class=\"line\"><span class=\"keyword\">set</span> currency(Britain) pound</div><div class=\"line\"><span class=\"keyword\">set</span> currency(Japan) yen</div><div class=\"line\">array size currency</div><div class=\"line\"><span class=\"preprocessor\"># =&gt;3</span></div><div class=\"line\">array names currency</div><div class=\"line\"><span class=\"preprocessor\"># =&gt; Britain Japan Frence</span></div><div class=\"line\"><span class=\"keyword\">foreach</span> i [array names currency] {</div><div class=\"line\">\tputs currency($i)</div><div class=\"line\">}</div><div class=\"line\"><span class=\"preprocessor\"># =&gt; pound yen euro</span></div></pre></td></tr></table></figure>\n\n<h3 id=\"列表\">列表</h3>\n<figure class=\"highlight tcl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">set</span> <span class=\"operator\">a</span> {<span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">4</span>}</div><div class=\"line\">lindex $<span class=\"operator\">a</span> <span class=\"number\">2</span></div><div class=\"line\"><span class=\"comment\">#=&gt; 2</span></div><div class=\"line\"><span class=\"built_in\">set</span> <span class=\"operator\">a</span> [list <span class=\"operator\">a</span> b c d e f g]</div><div class=\"line\">lindex $<span class=\"operator\">a</span> <span class=\"number\">2</span></div><div class=\"line\"><span class=\"comment\">#=&gt; b</span></div><div class=\"line\"><span class=\"comment\">#concat ?arg arg ...?</span></div><div class=\"line\"><span class=\"comment\">#使用多个arg来组成一个列表，这两个命令使用频度很高，使用也非常简单</span></div></pre></td></tr></table></figure>\n\n<h3 id=\"字符串操作\">字符串操作</h3>\n<figure class=\"highlight tcl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">string</span> length <span class=\"keyword\">string</span></div><div class=\"line\"><span class=\"preprocessor\">#返回String中的字符串个数</span></div><div class=\"line\"><span class=\"keyword\">string</span> range <span class=\"keyword\">string</span> first last</div><div class=\"line\"><span class=\"preprocessor\">#返回string当中从first到last之间的所有子字符串</span></div><div class=\"line\"><span class=\"keyword\">string</span> match ?-nocase? pattern <span class=\"keyword\">string</span></div><div class=\"line\"><span class=\"preprocessor\">#尝试对string进行匹配，匹配成功返回1，否则返回0</span></div><div class=\"line\"><span class=\"keyword\">string</span> relace <span class=\"keyword\">string</span> first last ？newstring？</div><div class=\"line\"><span class=\"preprocessor\">#尝试将frist到last中间所有字符串替换为newstring</span></div><div class=\"line\"><span class=\"keyword\">string</span> trim <span class=\"keyword\">string</span></div><div class=\"line\"><span class=\"preprocessor\">#尝试删除string前后的空格</span></div><div class=\"line\"><span class=\"keyword\">string</span> compare string1 string2</div><div class=\"line\"><span class=\"preprocessor\">#尝试比较string1和string2</span></div><div class=\"line\"><span class=\"keyword\">string</span> is digit <span class=\"number\">1234</span></div><div class=\"line\"><span class=\"preprocessor\">#返回1234是否为数字</span></div></pre></td></tr></table></figure>\n\n<h3 id=\"正则表达式\">正则表达式</h3>\n<figure class=\"highlight tcl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">regex {^<span class=\"attr_selector\">[0-9]</span>+$} 510</div><div class=\"line\">#尝试对后面的字符串进行匹配，若匹配成功返回1，否则返回0</div><div class=\"line\">regex {(<span class=\"attr_selector\">[0-9]</span>+) *(<span class=\"attr_selector\">[a-z]</span>+)}</div></pre></td></tr></table></figure>\n\n","source":"_posts/basic-tcl-command.markdown","raw":"---\nlayout: post\ntitle:  \"Basic commands of Tcl\"\ndate:   2014-07-14 22:31:00\ncategories: Tcl\nimg_src: \"/img/tcl.jpg\"\ndescription: \"Help you learning tcl quickly.\"\n---\n## Tcl 学习之路\n###变量\n- tcl变量在初始化的时候无类型\n- 使用set xxx = xxxx进行初始化\n- 使用set xxx可以查看xxx的值\n- 使用unset将变量release掉\n- 预定义的变量包括env（系统变量）argv（脚本执行的参数）argc（脚本参数的个数）argv0执行脚本的程序名\n\n\n###【】的使用\n- 【】用于将内部命令结果的返回值作为另外一个命令的参数\n- 比如 set var2 【set var】就把var的只传给了var2\n\n###“”的使用\n- 用于把一段内容封装成string类型\n- 比如 set var \"multiple word\"\n- 可以在“”中加入【】之类进行替换\n- 比如 set b \"a is [set a]\" 会打印a is 2\n- 特殊字符如\\n等同样有效\n\n###{}的使用\n- 如果内容内部不需要对特殊字符进行处理，那么可以使用{}\n- 如set a {123\\n},则不会对\\n进行处理\n\n###数组\nset earnings(January) 87966\n注意tcl中的array是基于map形式的，没有固定的元素顺序，需要顺序的话可以使用列表，这里的数组有点像java中的set，索引始终是字符串类型的，即使你使用1作为索引，他依然是将1转换成字符串\n###多维数组\n- 可以通过多个索引实现多维数组\n- 例如set matrix（1,1）140\n\n###查询数组元素\n``` tcl\nset currency(Frence) euro\nset currency(Britain) pound\nset currency(Japan) yen\narray size currency\n# =>3\narray names currency\n# => Britain Japan Frence\nforeach i [array names currency] {\n\tputs currency($i)\n}\n# => pound yen euro\n```\n###列表\n``` tcl\nset a {1 2 3 4}\nlindex $a 2\n#=> 2\nset a [list a b c d e f g]\nlindex $a 2\n#=> b\n#concat ?arg arg ...?\n#使用多个arg来组成一个列表，这两个命令使用频度很高，使用也非常简单\n```\n###字符串操作\n``` tcl\nstring length string\n#返回String中的字符串个数\nstring range string first last\n#返回string当中从first到last之间的所有子字符串\nstring match ?-nocase? pattern string\n#尝试对string进行匹配，匹配成功返回1，否则返回0\nstring relace string first last ？newstring？\n#尝试将frist到last中间所有字符串替换为newstring\nstring trim string\n#尝试删除string前后的空格\nstring compare string1 string2\n#尝试比较string1和string2\nstring is digit 1234\n#返回1234是否为数字\n```\n###正则表达式\n``` tcl\nregex {^[0-9]+$} 510\n#尝试对后面的字符串进行匹配，若匹配成功返回1，否则返回0\nregex {([0-9]+) *([a-z]+)}\n```\n","slug":"basic-tcl-command","updated":1406823288000,"excerpt":"","_id":"k46ebt15e9x60mji","tags":[],"comments":true,"photos":[],"link":""}],"Tag":[]}